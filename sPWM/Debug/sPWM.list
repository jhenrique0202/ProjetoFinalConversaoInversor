
sPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003ff0  08003ff0  00013ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f0  080041f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041f8  080041f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000010  0800420c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800420c  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b29  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015d7  00000000  00000000  00027ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  00029178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000720  00000000  00000000  00029ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016fc2  00000000  00000000  0002a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009466  00000000  00000000  00041192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087a56  00000000  00000000  0004a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b3c  00000000  00000000  000d2050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d4b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003fd8 	.word	0x08003fd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003fd8 	.word	0x08003fd8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__gesf2>:
 8000d08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d0c:	e006      	b.n	8000d1c <__cmpsf2+0x4>
 8000d0e:	bf00      	nop

08000d10 <__lesf2>:
 8000d10:	f04f 0c01 	mov.w	ip, #1
 8000d14:	e002      	b.n	8000d1c <__cmpsf2+0x4>
 8000d16:	bf00      	nop

08000d18 <__cmpsf2>:
 8000d18:	f04f 0c01 	mov.w	ip, #1
 8000d1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d2c:	bf18      	it	ne
 8000d2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d32:	d011      	beq.n	8000d58 <__cmpsf2+0x40>
 8000d34:	b001      	add	sp, #4
 8000d36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d3a:	bf18      	it	ne
 8000d3c:	ea90 0f01 	teqne	r0, r1
 8000d40:	bf58      	it	pl
 8000d42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d46:	bf88      	it	hi
 8000d48:	17c8      	asrhi	r0, r1, #31
 8000d4a:	bf38      	it	cc
 8000d4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d50:	bf18      	it	ne
 8000d52:	f040 0001 	orrne.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	d102      	bne.n	8000d64 <__cmpsf2+0x4c>
 8000d5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d62:	d105      	bne.n	8000d70 <__cmpsf2+0x58>
 8000d64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d68:	d1e4      	bne.n	8000d34 <__cmpsf2+0x1c>
 8000d6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d6e:	d0e1      	beq.n	8000d34 <__cmpsf2+0x1c>
 8000d70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__aeabi_cfrcmple>:
 8000d78:	4684      	mov	ip, r0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	4661      	mov	r1, ip
 8000d7e:	e7ff      	b.n	8000d80 <__aeabi_cfcmpeq>

08000d80 <__aeabi_cfcmpeq>:
 8000d80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d82:	f7ff ffc9 	bl	8000d18 <__cmpsf2>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	bf48      	it	mi
 8000d8a:	f110 0f00 	cmnmi.w	r0, #0
 8000d8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d90 <__aeabi_fcmpeq>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff fff4 	bl	8000d80 <__aeabi_cfcmpeq>
 8000d98:	bf0c      	ite	eq
 8000d9a:	2001      	moveq	r0, #1
 8000d9c:	2000      	movne	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_fcmplt>:
 8000da4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da8:	f7ff ffea 	bl	8000d80 <__aeabi_cfcmpeq>
 8000dac:	bf34      	ite	cc
 8000dae:	2001      	movcc	r0, #1
 8000db0:	2000      	movcs	r0, #0
 8000db2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db6:	bf00      	nop

08000db8 <__aeabi_fcmple>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff ffe0 	bl	8000d80 <__aeabi_cfcmpeq>
 8000dc0:	bf94      	ite	ls
 8000dc2:	2001      	movls	r0, #1
 8000dc4:	2000      	movhi	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_fcmpge>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffd2 	bl	8000d78 <__aeabi_cfrcmple>
 8000dd4:	bf94      	ite	ls
 8000dd6:	2001      	movls	r0, #1
 8000dd8:	2000      	movhi	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmpgt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffc8 	bl	8000d78 <__aeabi_cfrcmple>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_uldivmod>:
 8000df4:	b953      	cbnz	r3, 8000e0c <__aeabi_uldivmod+0x18>
 8000df6:	b94a      	cbnz	r2, 8000e0c <__aeabi_uldivmod+0x18>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	2800      	cmpeq	r0, #0
 8000dfe:	bf1c      	itt	ne
 8000e00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e08:	f000 b972 	b.w	80010f0 <__aeabi_idiv0>
 8000e0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e14:	f000 f806 	bl	8000e24 <__udivmoddi4>
 8000e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	b004      	add	sp, #16
 8000e22:	4770      	bx	lr

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	468e      	mov	lr, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14c      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4694      	mov	ip, r2
 8000e38:	d967      	bls.n	8000f0a <__udivmoddi4+0xe6>
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	b153      	cbz	r3, 8000e56 <__udivmoddi4+0x32>
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	f1c3 0220 	rsb	r2, r3, #32
 8000e48:	fa01 fe03 	lsl.w	lr, r1, r3
 8000e4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e50:	ea42 0e0e 	orr.w	lr, r2, lr
 8000e54:	409c      	lsls	r4, r3
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fbbe f1f7 	udiv	r1, lr, r7
 8000e5e:	fa1f f58c 	uxth.w	r5, ip
 8000e62:	fb07 ee11 	mls	lr, r7, r1, lr
 8000e66:	fb01 f005 	mul.w	r0, r1, r5
 8000e6a:	0c22      	lsrs	r2, r4, #16
 8000e6c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x66>
 8000e74:	eb1c 0202 	adds.w	r2, ip, r2
 8000e78:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000e7c:	f080 8119 	bcs.w	80010b2 <__udivmoddi4+0x28e>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f240 8116 	bls.w	80010b2 <__udivmoddi4+0x28e>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a12      	subs	r2, r2, r0
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	fb00 f505 	mul.w	r5, r0, r5
 8000e98:	b2a4      	uxth	r4, r4
 8000e9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e9e:	42a5      	cmp	r5, r4
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x94>
 8000ea2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000eaa:	f080 8104 	bcs.w	80010b6 <__udivmoddi4+0x292>
 8000eae:	42a5      	cmp	r5, r4
 8000eb0:	f240 8101 	bls.w	80010b6 <__udivmoddi4+0x292>
 8000eb4:	4464      	add	r4, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	1b64      	subs	r4, r4, r5
 8000ec0:	b11e      	cbz	r6, 8000eca <__udivmoddi4+0xa6>
 8000ec2:	40dc      	lsrs	r4, r3
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e9c6 4300 	strd	r4, r3, [r6]
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0xc0>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	f000 80ea 	beq.w	80010ac <__udivmoddi4+0x288>
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e9c6 0500 	strd	r0, r5, [r6]
 8000ede:	4608      	mov	r0, r1
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	fab3 f183 	clz	r1, r3
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d148      	bne.n	8000f7e <__udivmoddi4+0x15a>
 8000eec:	42ab      	cmp	r3, r5
 8000eee:	d302      	bcc.n	8000ef6 <__udivmoddi4+0xd2>
 8000ef0:	4282      	cmp	r2, r0
 8000ef2:	f200 80f8 	bhi.w	80010e6 <__udivmoddi4+0x2c2>
 8000ef6:	1a84      	subs	r4, r0, r2
 8000ef8:	eb65 0203 	sbc.w	r2, r5, r3
 8000efc:	2001      	movs	r0, #1
 8000efe:	4696      	mov	lr, r2
 8000f00:	2e00      	cmp	r6, #0
 8000f02:	d0e2      	beq.n	8000eca <__udivmoddi4+0xa6>
 8000f04:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f08:	e7df      	b.n	8000eca <__udivmoddi4+0xa6>
 8000f0a:	b902      	cbnz	r2, 8000f0e <__udivmoddi4+0xea>
 8000f0c:	deff      	udf	#255	; 0xff
 8000f0e:	fab2 f382 	clz	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 808e 	bne.w	8001034 <__udivmoddi4+0x210>
 8000f18:	1a88      	subs	r0, r1, r2
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	0c17      	lsrs	r7, r2, #16
 8000f1e:	fa1f fe82 	uxth.w	lr, r2
 8000f22:	fbb0 f5f7 	udiv	r5, r0, r7
 8000f26:	fb07 0015 	mls	r0, r7, r5, r0
 8000f2a:	0c22      	lsrs	r2, r4, #16
 8000f2c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f30:	fb0e f005 	mul.w	r0, lr, r5
 8000f34:	4290      	cmp	r0, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x126>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x124>
 8000f42:	4290      	cmp	r0, r2
 8000f44:	f200 80cc 	bhi.w	80010e0 <__udivmoddi4+0x2bc>
 8000f48:	4645      	mov	r5, r8
 8000f4a:	1a12      	subs	r2, r2, r0
 8000f4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f50:	fb07 2210 	mls	r2, r7, r0, r2
 8000f54:	fb0e fe00 	mul.w	lr, lr, r0
 8000f58:	b2a4      	uxth	r4, r4
 8000f5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f5e:	45a6      	cmp	lr, r4
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x150>
 8000f62:	eb1c 0404 	adds.w	r4, ip, r4
 8000f66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f6a:	d202      	bcs.n	8000f72 <__udivmoddi4+0x14e>
 8000f6c:	45a6      	cmp	lr, r4
 8000f6e:	f200 80b4 	bhi.w	80010da <__udivmoddi4+0x2b6>
 8000f72:	4610      	mov	r0, r2
 8000f74:	eba4 040e 	sub.w	r4, r4, lr
 8000f78:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f7c:	e7a0      	b.n	8000ec0 <__udivmoddi4+0x9c>
 8000f7e:	f1c1 0720 	rsb	r7, r1, #32
 8000f82:	408b      	lsls	r3, r1
 8000f84:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f88:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f94:	fbba f8f9 	udiv	r8, sl, r9
 8000f98:	408d      	lsls	r5, r1
 8000f9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f9e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000fa2:	fa1f fe8c 	uxth.w	lr, ip
 8000fa6:	432b      	orrs	r3, r5
 8000fa8:	fa00 f501 	lsl.w	r5, r0, r1
 8000fac:	fb08 f00e 	mul.w	r0, r8, lr
 8000fb0:	0c1c      	lsrs	r4, r3, #16
 8000fb2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000fb6:	42a0      	cmp	r0, r4
 8000fb8:	fa02 f201 	lsl.w	r2, r2, r1
 8000fbc:	d90b      	bls.n	8000fd6 <__udivmoddi4+0x1b2>
 8000fbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc2:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fc6:	f080 8086 	bcs.w	80010d6 <__udivmoddi4+0x2b2>
 8000fca:	42a0      	cmp	r0, r4
 8000fcc:	f240 8083 	bls.w	80010d6 <__udivmoddi4+0x2b2>
 8000fd0:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd4:	4464      	add	r4, ip
 8000fd6:	1a24      	subs	r4, r4, r0
 8000fd8:	b298      	uxth	r0, r3
 8000fda:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fde:	fb09 4413 	mls	r4, r9, r3, r4
 8000fe2:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fe6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000fea:	45a6      	cmp	lr, r4
 8000fec:	d908      	bls.n	8001000 <__udivmoddi4+0x1dc>
 8000fee:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff2:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000ff6:	d26a      	bcs.n	80010ce <__udivmoddi4+0x2aa>
 8000ff8:	45a6      	cmp	lr, r4
 8000ffa:	d968      	bls.n	80010ce <__udivmoddi4+0x2aa>
 8000ffc:	3b02      	subs	r3, #2
 8000ffe:	4464      	add	r4, ip
 8001000:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001004:	fba0 9302 	umull	r9, r3, r0, r2
 8001008:	eba4 040e 	sub.w	r4, r4, lr
 800100c:	429c      	cmp	r4, r3
 800100e:	46c8      	mov	r8, r9
 8001010:	469e      	mov	lr, r3
 8001012:	d354      	bcc.n	80010be <__udivmoddi4+0x29a>
 8001014:	d051      	beq.n	80010ba <__udivmoddi4+0x296>
 8001016:	2e00      	cmp	r6, #0
 8001018:	d067      	beq.n	80010ea <__udivmoddi4+0x2c6>
 800101a:	ebb5 0308 	subs.w	r3, r5, r8
 800101e:	eb64 040e 	sbc.w	r4, r4, lr
 8001022:	40cb      	lsrs	r3, r1
 8001024:	fa04 f707 	lsl.w	r7, r4, r7
 8001028:	431f      	orrs	r7, r3
 800102a:	40cc      	lsrs	r4, r1
 800102c:	e9c6 7400 	strd	r7, r4, [r6]
 8001030:	2100      	movs	r1, #0
 8001032:	e74a      	b.n	8000eca <__udivmoddi4+0xa6>
 8001034:	fa02 fc03 	lsl.w	ip, r2, r3
 8001038:	f1c3 0020 	rsb	r0, r3, #32
 800103c:	40c1      	lsrs	r1, r0
 800103e:	409d      	lsls	r5, r3
 8001040:	fa24 f000 	lsr.w	r0, r4, r0
 8001044:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001048:	4328      	orrs	r0, r5
 800104a:	fbb1 f5f7 	udiv	r5, r1, r7
 800104e:	fb07 1115 	mls	r1, r7, r5, r1
 8001052:	fa1f fe8c 	uxth.w	lr, ip
 8001056:	0c02      	lsrs	r2, r0, #16
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	fa04 f403 	lsl.w	r4, r4, r3
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x256>
 8001068:	eb1c 0202 	adds.w	r2, ip, r2
 800106c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001070:	d22f      	bcs.n	80010d2 <__udivmoddi4+0x2ae>
 8001072:	4291      	cmp	r1, r2
 8001074:	d92d      	bls.n	80010d2 <__udivmoddi4+0x2ae>
 8001076:	3d02      	subs	r5, #2
 8001078:	4462      	add	r2, ip
 800107a:	1a52      	subs	r2, r2, r1
 800107c:	fbb2 f1f7 	udiv	r1, r2, r7
 8001080:	fb07 2211 	mls	r2, r7, r1, r2
 8001084:	b280      	uxth	r0, r0
 8001086:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800108a:	fb01 f20e 	mul.w	r2, r1, lr
 800108e:	4282      	cmp	r2, r0
 8001090:	d908      	bls.n	80010a4 <__udivmoddi4+0x280>
 8001092:	eb1c 0000 	adds.w	r0, ip, r0
 8001096:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800109a:	d216      	bcs.n	80010ca <__udivmoddi4+0x2a6>
 800109c:	4282      	cmp	r2, r0
 800109e:	d914      	bls.n	80010ca <__udivmoddi4+0x2a6>
 80010a0:	3902      	subs	r1, #2
 80010a2:	4460      	add	r0, ip
 80010a4:	1a80      	subs	r0, r0, r2
 80010a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80010aa:	e73a      	b.n	8000f22 <__udivmoddi4+0xfe>
 80010ac:	4631      	mov	r1, r6
 80010ae:	4630      	mov	r0, r6
 80010b0:	e70b      	b.n	8000eca <__udivmoddi4+0xa6>
 80010b2:	4671      	mov	r1, lr
 80010b4:	e6e9      	b.n	8000e8a <__udivmoddi4+0x66>
 80010b6:	4610      	mov	r0, r2
 80010b8:	e6fe      	b.n	8000eb8 <__udivmoddi4+0x94>
 80010ba:	454d      	cmp	r5, r9
 80010bc:	d2ab      	bcs.n	8001016 <__udivmoddi4+0x1f2>
 80010be:	ebb9 0802 	subs.w	r8, r9, r2
 80010c2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80010c6:	3801      	subs	r0, #1
 80010c8:	e7a5      	b.n	8001016 <__udivmoddi4+0x1f2>
 80010ca:	4641      	mov	r1, r8
 80010cc:	e7ea      	b.n	80010a4 <__udivmoddi4+0x280>
 80010ce:	4603      	mov	r3, r0
 80010d0:	e796      	b.n	8001000 <__udivmoddi4+0x1dc>
 80010d2:	4645      	mov	r5, r8
 80010d4:	e7d1      	b.n	800107a <__udivmoddi4+0x256>
 80010d6:	46d0      	mov	r8, sl
 80010d8:	e77d      	b.n	8000fd6 <__udivmoddi4+0x1b2>
 80010da:	4464      	add	r4, ip
 80010dc:	3802      	subs	r0, #2
 80010de:	e749      	b.n	8000f74 <__udivmoddi4+0x150>
 80010e0:	3d02      	subs	r5, #2
 80010e2:	4462      	add	r2, ip
 80010e4:	e731      	b.n	8000f4a <__udivmoddi4+0x126>
 80010e6:	4608      	mov	r0, r1
 80010e8:	e70a      	b.n	8000f00 <__udivmoddi4+0xdc>
 80010ea:	4631      	mov	r1, r6
 80010ec:	e6ed      	b.n	8000eca <__udivmoddi4+0xa6>
 80010ee:	bf00      	nop

080010f0 <__aeabi_idiv0>:
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <triangular>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float triangular(double t, float c, float frequency){
 80010f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
  while(t > 1.0/frequency) t -= 1.0/frequency;
 8001104:	e013      	b.n	800112e <triangular+0x3a>
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f7ff f986 	bl	8000418 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	f04f 0000 	mov.w	r0, #0
 8001114:	4955      	ldr	r1, [pc, #340]	; (800126c <triangular+0x178>)
 8001116:	f7ff fb01 	bl	800071c <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001122:	f7ff f819 	bl	8000158 <__aeabi_dsub>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800112e:	6838      	ldr	r0, [r7, #0]
 8001130:	f7ff f972 	bl	8000418 <__aeabi_f2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	494b      	ldr	r1, [pc, #300]	; (800126c <triangular+0x178>)
 800113e:	f7ff faed 	bl	800071c <__aeabi_ddiv>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800114a:	f7ff fc4d 	bl	80009e8 <__aeabi_dcmpgt>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1d8      	bne.n	8001106 <triangular+0x12>

  if(t < 1.0/(frequency*2)) return  c * (t * frequency/2);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fccd 	bl	8000af8 <__addsf3>
 800115e:	4603      	mov	r3, r0
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f959 	bl	8000418 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	493f      	ldr	r1, [pc, #252]	; (800126c <triangular+0x178>)
 8001170:	f7ff fad4 	bl	800071c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800117c:	f7ff fc16 	bl	80009ac <__aeabi_dcmplt>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d023      	beq.n	80011ce <triangular+0xda>
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff f946 	bl	8000418 <__aeabi_f2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	f7ff f941 	bl	8000418 <__aeabi_f2d>
 8001196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800119a:	f7ff f995 	bl	80004c8 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ae:	f7ff fab5 	bl	800071c <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4620      	mov	r0, r4
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff f985 	bl	80004c8 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fc41 	bl	8000a4c <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	e049      	b.n	8001262 <triangular+0x16e>
  else return c - c * ((t - 1.0/(frequency*2)) * frequency/2);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff f922 	bl	8000418 <__aeabi_f2d>
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff f91d 	bl	8000418 <__aeabi_f2d>
 80011de:	4680      	mov	r8, r0
 80011e0:	4689      	mov	r9, r1
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fc86 	bl	8000af8 <__addsf3>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f912 	bl	8000418 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	f04f 0000 	mov.w	r0, #0
 80011fc:	491b      	ldr	r1, [pc, #108]	; (800126c <triangular+0x178>)
 80011fe:	f7ff fa8d 	bl	800071c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800120a:	f7fe ffa5 	bl	8000158 <__aeabi_dsub>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4692      	mov	sl, r2
 8001214:	469b      	mov	fp, r3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff f8fe 	bl	8000418 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4650      	mov	r0, sl
 8001222:	4659      	mov	r1, fp
 8001224:	f7ff f950 	bl	80004c8 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001238:	f7ff fa70 	bl	800071c <__aeabi_ddiv>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4640      	mov	r0, r8
 8001242:	4649      	mov	r1, r9
 8001244:	f7ff f940 	bl	80004c8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7fe ff82 	bl	8000158 <__aeabi_dsub>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fbf6 	bl	8000a4c <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800126c:	3ff00000 	.word	0x3ff00000

08001270 <HAL_TIM_PeriodElapsedCallback>:

volatile uint64_t i;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    if(htim == &htim2){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a2c      	ldr	r2, [pc, #176]	; (800132c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d150      	bne.n	8001322 <HAL_TIM_PeriodElapsedCallback+0xb2>
//    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);


    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, pinsStates[i] & (1 << S1_BIT));
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	492b      	ldr	r1, [pc, #172]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001288:	188b      	adds	r3, r1, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800129a:	4827      	ldr	r0, [pc, #156]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800129c:	f000 fe8a 	bl	8001fb4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, pinsStates[i] & (1 << S2_BIT));
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	4923      	ldr	r1, [pc, #140]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012a8:	188b      	adds	r3, r1, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ba:	4820      	ldr	r0, [pc, #128]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012bc:	f000 fe7a 	bl	8001fb4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, pinsStates[i] & (1 << S3_BIT));
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	491b      	ldr	r1, [pc, #108]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012c8:	188b      	adds	r3, r1, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012dc:	f000 fe6a 	bl	8001fb4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, pinsStates[i] & (1 << S4_BIT));
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	4913      	ldr	r1, [pc, #76]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012e8:	188b      	adds	r3, r1, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	4810      	ldr	r0, [pc, #64]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012fc:	f000 fe5a 	bl	8001fb4 <HAL_GPIO_WritePin>

    	i = (i + 1) % (SAMPLES_PERIODS_IN_AN_SINUSOID_PERIOD);
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	1c54      	adds	r4, r2, #1
 8001308:	f143 0500 	adc.w	r5, r3, #0
 800130c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7ff fd6c 	bl	8000df4 <__aeabi_uldivmod>
 800131c:	4904      	ldr	r1, [pc, #16]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800131e:	e9c1 2300 	strd	r2, r3, [r1]
    }
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bdb0      	pop	{r4, r5, r7, pc}
 800132a:	bf00      	nop
 800132c:	2000002c 	.word	0x2000002c
 8001330:	20000460 	.word	0x20000460
 8001334:	20000074 	.word	0x20000074
 8001338:	40010c00 	.word	0x40010c00
 800133c:	40010800 	.word	0x40010800

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f000 fb41 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f97d 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 fa0d 	bl	800176c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001352:	f000 f9bf 	bl	80016d4 <MX_TIM2_Init>
 *   PB13 -> S2
 *   PB14 -> S3
 *   PB15 -> S4
 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135c:	48b2      	ldr	r0, [pc, #712]	; (8001628 <main+0x2e8>)
 800135e:	f000 fe29 	bl	8001fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 |  GPIO_PIN_10 |  GPIO_PIN_11, 1);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001368:	48b0      	ldr	r0, [pc, #704]	; (800162c <main+0x2ec>)
 800136a:	f000 fe23 	bl	8001fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, 1);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001374:	48ae      	ldr	r0, [pc, #696]	; (8001630 <main+0x2f0>)
 8001376:	f000 fe1d 	bl	8001fb4 <HAL_GPIO_WritePin>

  float ySinusoid, yTriangular;

  double tUs;
  uint8_t actualPinStates = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  uint8_t deadTime = 2;
 800137e:	2302      	movs	r3, #2
 8001380:	73bb      	strb	r3, [r7, #14]
  for(i = 0; i < SAMPLES_PERIODS_IN_AN_SINUSOID_PERIOD; i ++){
 8001382:	49ac      	ldr	r1, [pc, #688]	; (8001634 <main+0x2f4>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
 8001390:	e103      	b.n	800159a <main+0x25a>
	  if((i % (uint64_t)(SAMPLING_FREQUENCY/SWITCHING_FREQUENCY)) == 0){
 8001392:	4ba8      	ldr	r3, [pc, #672]	; (8001634 <main+0x2f4>)
 8001394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001398:	f04f 0205 	mov.w	r2, #5
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	f7ff fd28 	bl	8000df4 <__aeabi_uldivmod>
 80013a4:	4313      	orrs	r3, r2
 80013a6:	f040 80a4 	bne.w	80014f2 <main+0x1b2>
		  tUs = i*1.0e6/SAMPLING_FREQUENCY;
 80013aa:	4ba2      	ldr	r3, [pc, #648]	; (8001634 <main+0x2f4>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff f852 	bl	800045c <__aeabi_ul2d>
 80013b8:	a391      	add	r3, pc, #580	; (adr r3, 8001600 <main+0x2c0>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f883 	bl	80004c8 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	a38f      	add	r3, pc, #572	; (adr r3, 8001608 <main+0x2c8>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff f9a4 	bl	800071c <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9c7 2304 	strd	r2, r3, [r7, #16]

		  ySinusoid = sin(2*M_PI*tUs*SINUSOID_FREQUENCY/(1e6));
 80013dc:	a38c      	add	r3, pc, #560	; (adr r3, 8001610 <main+0x2d0>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e6:	f7ff f86f 	bl	80004c8 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b90      	ldr	r3, [pc, #576]	; (8001638 <main+0x2f8>)
 80013f8:	f7ff f866 	bl	80004c8 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	a37e      	add	r3, pc, #504	; (adr r3, 8001600 <main+0x2c0>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f987 	bl	800071c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f001 fded 	bl	8002ff4 <sin>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fb13 	bl	8000a4c <__aeabi_d2f>
 8001426:	4603      	mov	r3, r0
 8001428:	60bb      	str	r3, [r7, #8]
		  yTriangular = triangular(tUs/1e6, 1.0, TRIANGULAR_FREQUENCY);
 800142a:	a375      	add	r3, pc, #468	; (adr r3, 8001600 <main+0x2c0>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001434:	f7ff f972 	bl	800071c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	4b7e      	ldr	r3, [pc, #504]	; (800163c <main+0x2fc>)
 8001442:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001446:	f7ff fe55 	bl	80010f4 <triangular>
 800144a:	6078      	str	r0, [r7, #4]

		  if(tUs < 1e6/(SINUSOID_FREQUENCY*2)){
 800144c:	a372      	add	r3, pc, #456	; (adr r3, 8001618 <main+0x2d8>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001456:	f7ff faa9 	bl	80009ac <__aeabi_dcmplt>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01d      	beq.n	800149c <main+0x15c>
			  yTriangular = triangular(tUs/1e6, 1.0, TRIANGULAR_FREQUENCY);
 8001460:	a367      	add	r3, pc, #412	; (adr r3, 8001600 <main+0x2c0>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800146a:	f7ff f957 	bl	800071c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	4b71      	ldr	r3, [pc, #452]	; (800163c <main+0x2fc>)
 8001478:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800147c:	f7ff fe3a 	bl	80010f4 <triangular>
 8001480:	6078      	str	r0, [r7, #4]

			  if(ySinusoid > yTriangular) actualPinStates = (0 << S4_BIT) | (0 << S3_BIT) | (1 << S2_BIT) | (1 << S1_BIT);
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f7ff fcab 	bl	8000de0 <__aeabi_fcmpgt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <main+0x156>
 8001490:	2303      	movs	r3, #3
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e02b      	b.n	80014ee <main+0x1ae>
			  else actualPinStates = (0 << S4_BIT) | (0 << S3_BIT) | (0 << S2_BIT) | (0 << S1_BIT);
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e028      	b.n	80014ee <main+0x1ae>
		  }
		  else{

			  yTriangular = triangular(tUs/1e6 - 1.0/(TRIANGULAR_FREQUENCY*2), 1.0, TRIANGULAR_FREQUENCY);
 800149c:	a358      	add	r3, pc, #352	; (adr r3, 8001600 <main+0x2c0>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a6:	f7ff f939 	bl	800071c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	a35b      	add	r3, pc, #364	; (adr r3, 8001620 <main+0x2e0>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7fe fe4e 	bl	8000158 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	4b5d      	ldr	r3, [pc, #372]	; (800163c <main+0x2fc>)
 80014c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014ca:	f7ff fe13 	bl	80010f4 <triangular>
 80014ce:	6078      	str	r0, [r7, #4]

			  if(-ySinusoid > yTriangular) actualPinStates = (1 << S4_BIT) | (1 << S3_BIT) | (0 << S2_BIT) | (0 << S1_BIT);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80014d6:	4619      	mov	r1, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fc63 	bl	8000da4 <__aeabi_fcmplt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <main+0x1aa>
 80014e4:	230c      	movs	r3, #12
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e001      	b.n	80014ee <main+0x1ae>
			  else actualPinStates = (0 << S4_BIT) | (0 << S3_BIT) | (0 << S2_BIT) | (0 << S1_BIT);
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
		  }

		  deadTime = 2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	73bb      	strb	r3, [r7, #14]
	  }

	  if(deadTime > 0){
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d040      	beq.n	800157a <main+0x23a>
		  if(tUs < 1e6/(SINUSOID_FREQUENCY*2)){
 80014f8:	a347      	add	r3, pc, #284	; (adr r3, 8001618 <main+0x2d8>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001502:	f7ff fa53 	bl	80009ac <__aeabi_dcmplt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d019      	beq.n	8001540 <main+0x200>
			  if(actualPinStates & (1 << S1_BIT)) pinsStates[i] = (actualPinStates & (0 << S1_BIT));
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <main+0x1e6>
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <main+0x2f4>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	4948      	ldr	r1, [pc, #288]	; (8001640 <main+0x300>)
 800151e:	188b      	adds	r3, r1, r2
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e025      	b.n	8001572 <main+0x232>
			  else if(actualPinStates & S2_BIT) pinsStates[i] = (actualPinStates & (0 << S2_BIT));
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <main+0x232>
 8001530:	4b40      	ldr	r3, [pc, #256]	; (8001634 <main+0x2f4>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	4942      	ldr	r1, [pc, #264]	; (8001640 <main+0x300>)
 8001538:	188b      	adds	r3, r1, r2
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e018      	b.n	8001572 <main+0x232>
		  }
		  else{
			  if(actualPinStates & S3_BIT) pinsStates[i] = (actualPinStates & (0 << S3_BIT));
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <main+0x21a>
 800154a:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <main+0x2f4>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	493b      	ldr	r1, [pc, #236]	; (8001640 <main+0x300>)
 8001552:	188b      	adds	r3, r1, r2
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e00b      	b.n	8001572 <main+0x232>
			  else if(actualPinStates & S4_BIT) pinsStates[i] = (actualPinStates & (0 << S4_BIT));
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <main+0x232>
 8001564:	4b33      	ldr	r3, [pc, #204]	; (8001634 <main+0x2f4>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	4935      	ldr	r1, [pc, #212]	; (8001640 <main+0x300>)
 800156c:	188b      	adds	r3, r1, r2
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
		  }

		  deadTime--;
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	3b01      	subs	r3, #1
 8001576:	73bb      	strb	r3, [r7, #14]
 8001578:	e006      	b.n	8001588 <main+0x248>
	  }
	  else pinsStates[i] = actualPinStates;
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <main+0x2f4>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	492f      	ldr	r1, [pc, #188]	; (8001640 <main+0x300>)
 8001582:	188b      	adds	r3, r1, r2
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SAMPLES_PERIODS_IN_AN_SINUSOID_PERIOD; i ++){
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <main+0x2f4>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	1c54      	adds	r4, r2, #1
 8001590:	f143 0500 	adc.w	r5, r3, #0
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <main+0x2f4>)
 8001596:	e9c3 4500 	strd	r4, r5, [r3]
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <main+0x2f4>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80015a4:	f173 0300 	sbcs.w	r3, r3, #0
 80015a8:	f4ff aef3 	bcc.w	8001392 <main+0x52>

  }

  i = 0;
 80015ac:	4921      	ldr	r1, [pc, #132]	; (8001634 <main+0x2f4>)
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c1 2300 	strd	r2, r3, [r1]

  htim2.Instance = TIM2;
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <main+0x304>)
 80015bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <main+0x304>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <main+0x304>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (uint32_t)(MICROCONTROLLER_FREQUENCY/SAMPLING_FREQUENCY/2);
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <main+0x304>)
 80015d0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80015d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <main+0x304>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <main+0x304>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e2:	4818      	ldr	r0, [pc, #96]	; (8001644 <main+0x304>)
 80015e4:	f001 f8dc 	bl	80027a0 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <main+0x2b2>
  {
	  Error_Handler();
 80015ee:	f000 f943 	bl	8001878 <Error_Handler>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 80015f2:	4814      	ldr	r0, [pc, #80]	; (8001644 <main+0x304>)
 80015f4:	f001 f924 	bl	8002840 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <main+0x2b8>
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	00000000 	.word	0x00000000
 8001604:	412e8480 	.word	0x412e8480
 8001608:	00000000 	.word	0x00000000
 800160c:	40ed4c00 	.word	0x40ed4c00
 8001610:	54442d18 	.word	0x54442d18
 8001614:	401921fb 	.word	0x401921fb
 8001618:	aaaaaaab 	.word	0xaaaaaaab
 800161c:	40c046aa 	.word	0x40c046aa
 8001620:	c3ece2a5 	.word	0xc3ece2a5
 8001624:	3f25d867 	.word	0x3f25d867
 8001628:	40011000 	.word	0x40011000
 800162c:	40010800 	.word	0x40010800
 8001630:	40010c00 	.word	0x40010c00
 8001634:	20000460 	.word	0x20000460
 8001638:	404e0000 	.word	0x404e0000
 800163c:	453b8000 	.word	0x453b8000
 8001640:	20000074 	.word	0x20000074
 8001644:	2000002c 	.word	0x2000002c

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b090      	sub	sp, #64	; 0x40
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	2228      	movs	r2, #40	; 0x28
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fca0 	bl	8002f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166a:	2301      	movs	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800166e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001678:	2301      	movs	r3, #1
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001686:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fca7 	bl	8001fe4 <HAL_RCC_OscConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800169c:	f000 f8ec 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a0:	230f      	movs	r3, #15
 80016a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a4:	2302      	movs	r3, #2
 80016a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2102      	movs	r1, #2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 ff14 	bl	80024e8 <HAL_RCC_ClockConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016c6:	f000 f8d7 	bl	8001878 <Error_Handler>
  }
}
 80016ca:	bf00      	nop
 80016cc:	3740      	adds	r7, #64	; 0x40
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <MX_TIM2_Init+0x94>)
 80016f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_TIM2_Init+0x94>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_TIM2_Init+0x94>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_TIM2_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_TIM2_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_TIM2_Init+0x94>)
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001716:	4814      	ldr	r0, [pc, #80]	; (8001768 <MX_TIM2_Init+0x94>)
 8001718:	f001 f842 	bl	80027a0 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001722:	f000 f8a9 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM2_Init+0x94>)
 8001734:	f001 f9de 	bl	8002af4 <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 f89b 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_TIM2_Init+0x94>)
 8001750:	f001 fbb4 	bl	8002ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800175a:	f000 f88d 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000002c 	.word	0x2000002c

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <MX_GPIO_Init+0xfc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a38      	ldr	r2, [pc, #224]	; (8001868 <MX_GPIO_Init+0xfc>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <MX_GPIO_Init+0xfc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <MX_GPIO_Init+0xfc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a32      	ldr	r2, [pc, #200]	; (8001868 <MX_GPIO_Init+0xfc>)
 800179e:	f043 0320 	orr.w	r3, r3, #32
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0320 	and.w	r3, r3, #32
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a26      	ldr	r2, [pc, #152]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e6:	4821      	ldr	r0, [pc, #132]	; (800186c <MX_GPIO_Init+0x100>)
 80017e8:	f000 fbe4 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017f2:	481f      	ldr	r0, [pc, #124]	; (8001870 <MX_GPIO_Init+0x104>)
 80017f4:	f000 fbde 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80017fe:	481d      	ldr	r0, [pc, #116]	; (8001874 <MX_GPIO_Init+0x108>)
 8001800:	f000 fbd8 	bl	8001fb4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4619      	mov	r1, r3
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <MX_GPIO_Init+0x100>)
 800181e:	f000 fa45 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001822:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_GPIO_Init+0x104>)
 800183c:	f000 fa36 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001840:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001844:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	4806      	ldr	r0, [pc, #24]	; (8001874 <MX_GPIO_Init+0x108>)
 800185a:	f000 fa27 	bl	8001cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40011000 	.word	0x40011000
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40010800 	.word	0x40010800

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	e7fe      	b.n	8001880 <Error_Handler+0x8>
	...

08001884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_MspInit+0x40>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_MspInit+0x40>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_MspInit+0x40>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_MspInit+0x40>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_MspInit+0x40>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_MspInit+0x40>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d8:	d113      	bne.n	8001902 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_TIM_Base_MspInit+0x44>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_TIM_Base_MspInit+0x44>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0x44>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	201c      	movs	r0, #28
 80018f8:	f000 f9a1 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018fc:	201c      	movs	r0, #28
 80018fe:	f000 f9ba 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001956:	f000 f87f 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <TIM2_IRQHandler+0x10>)
 8001966:	f000 ffbd 	bl	80028e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000002c 	.word	0x2000002c

08001974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001980:	f7ff fff8 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001986:	490c      	ldr	r1, [pc, #48]	; (80019b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800199c:	4c09      	ldr	r4, [pc, #36]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f001 faff 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ae:	f7ff fcc7 	bl	8001340 <main>
  bx lr
 80019b2:	4770      	bx	lr
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019bc:	08004200 	.word	0x08004200
  ldr r2, =_sbss
 80019c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019c4:	2000046c 	.word	0x2000046c

080019c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_2_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x28>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x28>)
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f923 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff ff4c 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f93b 	bl	8001c92 <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a34:	f000 f903 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x1c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x20>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_IncTick+0x20>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000468 	.word	0x20000468

08001a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <HAL_GetTick+0x10>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000468 	.word	0x20000468

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4906      	ldr	r1, [pc, #24]	; (8001b28 <__NVIC_EnableIRQ+0x34>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c08:	f7ff ff90 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff2d 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff42 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff90 	bl	8001b80 <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5f 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff35 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b08b      	sub	sp, #44	; 0x2c
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e169      	b.n	8001f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8158 	bne.w	8001f8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a9a      	ldr	r2, [pc, #616]	; (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d05e      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a98      	ldr	r2, [pc, #608]	; (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d875      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cee:	4a98      	ldr	r2, [pc, #608]	; (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d058      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a96      	ldr	r2, [pc, #600]	; (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d86f      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cfa:	4a96      	ldr	r2, [pc, #600]	; (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d052      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d00:	4a94      	ldr	r2, [pc, #592]	; (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d869      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d06:	4a94      	ldr	r2, [pc, #592]	; (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d04c      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a92      	ldr	r2, [pc, #584]	; (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d863      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d12:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d046      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a90      	ldr	r2, [pc, #576]	; (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d85d      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	d82a      	bhi.n	8001d78 <HAL_GPIO_Init+0xcc>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d859      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_GPIO_Init+0x80>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d93 	.word	0x08001d93
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001ddb 	.word	0x08001ddb
 8001d40:	08001ddb 	.word	0x08001ddb
 8001d44:	08001ddb 	.word	0x08001ddb
 8001d48:	08001ddb 	.word	0x08001ddb
 8001d4c:	08001ddb 	.word	0x08001ddb
 8001d50:	08001ddb 	.word	0x08001ddb
 8001d54:	08001ddb 	.word	0x08001ddb
 8001d58:	08001ddb 	.word	0x08001ddb
 8001d5c:	08001ddb 	.word	0x08001ddb
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001ddb 	.word	0x08001ddb
 8001d68:	08001ddb 	.word	0x08001ddb
 8001d6c:	08001ddb 	.word	0x08001ddb
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d9d 	.word	0x08001d9d
 8001d78:	4a79      	ldr	r2, [pc, #484]	; (8001f60 <HAL_GPIO_Init+0x2b4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7e:	e02c      	b.n	8001dda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e029      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e024      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	3308      	adds	r3, #8
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e01f      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	330c      	adds	r3, #12
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e01a      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dae:	2304      	movs	r3, #4
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e013      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	611a      	str	r2, [r3, #16]
          break;
 8001dc6:	e009      	b.n	8001ddc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	615a      	str	r2, [r3, #20]
          break;
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          break;
 8001dda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d801      	bhi.n	8001de6 <HAL_GPIO_Init+0x13a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_Init+0x13e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2bff      	cmp	r3, #255	; 0xff
 8001df0:	d802      	bhi.n	8001df8 <HAL_GPIO_Init+0x14c>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x152>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	210f      	movs	r1, #15
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80b1 	beq.w	8001f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e44:	4a48      	ldr	r2, [pc, #288]	; (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a40      	ldr	r2, [pc, #256]	; (8001f6c <HAL_GPIO_Init+0x2c0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3f      	ldr	r2, [pc, #252]	; (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00d      	beq.n	8001e94 <HAL_GPIO_Init+0x1e8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3e      	ldr	r2, [pc, #248]	; (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x1e4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	; (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_GPIO_Init+0x1e0>
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e006      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	e004      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eaa:	492f      	ldr	r1, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	492c      	ldr	r1, [pc, #176]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	4928      	ldr	r1, [pc, #160]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4922      	ldr	r1, [pc, #136]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60cb      	str	r3, [r1, #12]
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	491e      	ldr	r1, [pc, #120]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4918      	ldr	r1, [pc, #96]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4914      	ldr	r1, [pc, #80]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d021      	beq.n	8001f80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e021      	b.n	8001f8e <HAL_GPIO_Init+0x2e2>
 8001f4a:	bf00      	nop
 8001f4c:	10320000 	.word	0x10320000
 8001f50:	10310000 	.word	0x10310000
 8001f54:	10220000 	.word	0x10220000
 8001f58:	10210000 	.word	0x10210000
 8001f5c:	10120000 	.word	0x10120000
 8001f60:	10110000 	.word	0x10110000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40010c00 	.word	0x40010c00
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40011400 	.word	0x40011400
 8001f7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	4909      	ldr	r1, [pc, #36]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f47f ae8e 	bne.w	8001cc0 <HAL_GPIO_Init+0x14>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	372c      	adds	r7, #44	; 0x2c
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e272      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8087 	beq.w	8002112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002004:	4b92      	ldr	r3, [pc, #584]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b04      	cmp	r3, #4
 800200e:	d00c      	beq.n	800202a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002010:	4b8f      	ldr	r3, [pc, #572]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d112      	bne.n	8002042 <HAL_RCC_OscConfig+0x5e>
 800201c:	4b8c      	ldr	r3, [pc, #560]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002028:	d10b      	bne.n	8002042 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202a:	4b89      	ldr	r3, [pc, #548]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d06c      	beq.n	8002110 <HAL_RCC_OscConfig+0x12c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d168      	bne.n	8002110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e24c      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x76>
 800204c:	4b80      	ldr	r3, [pc, #512]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a7f      	ldr	r2, [pc, #508]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	e02e      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x98>
 8002062:	4b7b      	ldr	r3, [pc, #492]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7a      	ldr	r2, [pc, #488]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b78      	ldr	r3, [pc, #480]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a77      	ldr	r2, [pc, #476]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e01d      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0xbc>
 8002086:	4b72      	ldr	r3, [pc, #456]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a71      	ldr	r2, [pc, #452]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6e      	ldr	r2, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 80020a0:	4b6b      	ldr	r3, [pc, #428]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a6a      	ldr	r2, [pc, #424]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a67      	ldr	r2, [pc, #412]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff fcdc 	bl	8001a7c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c8:	f7ff fcd8 	bl	8001a7c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e200      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0xe4>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fcc8 	bl	8001a7c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff fcc4 	bl	8001a7c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1ec      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x10c>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d063      	beq.n	80021e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800211e:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800212a:	4b49      	ldr	r3, [pc, #292]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b08      	cmp	r3, #8
 8002134:	d11c      	bne.n	8002170 <HAL_RCC_OscConfig+0x18c>
 8002136:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d116      	bne.n	8002170 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_RCC_OscConfig+0x176>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e1c0      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4939      	ldr	r1, [pc, #228]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	e03a      	b.n	80021e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	4b36      	ldr	r3, [pc, #216]	; (8002254 <HAL_RCC_OscConfig+0x270>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff fc7d 	bl	8001a7c <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002186:	f7ff fc79 	bl	8001a7c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1a1      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4927      	ldr	r1, [pc, #156]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <HAL_RCC_OscConfig+0x270>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc5c 	bl	8001a7c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c8:	f7ff fc58 	bl	8001a7c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e180      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03a      	beq.n	8002268 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d019      	beq.n	800222e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_RCC_OscConfig+0x274>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7ff fc3c 	bl	8001a7c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002208:	f7ff fc38 	bl	8001a7c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e160      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_RCC_OscConfig+0x26c>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002226:	2001      	movs	r0, #1
 8002228:	f000 fa9c 	bl	8002764 <RCC_Delay>
 800222c:	e01c      	b.n	8002268 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_OscConfig+0x274>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002234:	f7ff fc22 	bl	8001a7c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223a:	e00f      	b.n	800225c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7ff fc1e 	bl	8001a7c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d908      	bls.n	800225c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e146      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	42420000 	.word	0x42420000
 8002258:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4b92      	ldr	r3, [pc, #584]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e9      	bne.n	800223c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a6 	beq.w	80023c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4b8b      	ldr	r3, [pc, #556]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10d      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a87      	ldr	r2, [pc, #540]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	61d3      	str	r3, [r2, #28]
 8002292:	4b85      	ldr	r3, [pc, #532]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b82      	ldr	r3, [pc, #520]	; (80024ac <HAL_RCC_OscConfig+0x4c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ae:	4b7f      	ldr	r3, [pc, #508]	; (80024ac <HAL_RCC_OscConfig+0x4c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7e      	ldr	r2, [pc, #504]	; (80024ac <HAL_RCC_OscConfig+0x4c8>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7ff fbdf 	bl	8001a7c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7ff fbdb 	bl	8001a7c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b64      	cmp	r3, #100	; 0x64
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e103      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b75      	ldr	r3, [pc, #468]	; (80024ac <HAL_RCC_OscConfig+0x4c8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x312>
 80022e8:	4b6f      	ldr	r3, [pc, #444]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4a6e      	ldr	r2, [pc, #440]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6213      	str	r3, [r2, #32]
 80022f4:	e02d      	b.n	8002352 <HAL_RCC_OscConfig+0x36e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x334>
 80022fe:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a69      	ldr	r2, [pc, #420]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a66      	ldr	r2, [pc, #408]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	e01c      	b.n	8002352 <HAL_RCC_OscConfig+0x36e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x356>
 8002320:	4b61      	ldr	r3, [pc, #388]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a60      	ldr	r2, [pc, #384]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a5d      	ldr	r2, [pc, #372]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e00b      	b.n	8002352 <HAL_RCC_OscConfig+0x36e>
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a57      	ldr	r2, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d015      	beq.n	8002386 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7ff fb8f 	bl	8001a7c <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff fb8b 	bl	8001a7c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0b1      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <HAL_RCC_OscConfig+0x37e>
 8002384:	e014      	b.n	80023b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7ff fb79 	bl	8001a7c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7ff fb75 	bl	8001a7c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e09b      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a4:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ee      	bne.n	800238e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a3b      	ldr	r2, [pc, #236]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8087 	beq.w	80024da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d061      	beq.n	800249c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d146      	bne.n	800246e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e0:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_RCC_OscConfig+0x4cc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fb49 	bl	8001a7c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ee:	f7ff fb45 	bl	8001a7c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e06d      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002414:	d108      	bne.n	8002428 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002416:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4921      	ldr	r1, [pc, #132]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002428:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a19      	ldr	r1, [r3, #32]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	430b      	orrs	r3, r1
 800243a:	491b      	ldr	r1, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_OscConfig+0x4cc>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7ff fb19 	bl	8001a7c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7ff fb15 	bl	8001a7c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e03d      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x46a>
 800246c:	e035      	b.n	80024da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_RCC_OscConfig+0x4cc>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff fb02 	bl	8001a7c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7ff fafe 	bl	8001a7c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e026      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x498>
 800249a:	e01e      	b.n	80024da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e019      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x500>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d0      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024fc:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d910      	bls.n	800252c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4965      	ldr	r1, [pc, #404]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800254e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002566:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d040      	beq.n	8002608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d115      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e073      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06b      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4936      	ldr	r1, [pc, #216]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d8:	f7ff fa50 	bl	8001a7c <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7ff fa4c 	bl	8001a7c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e053      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 020c 	and.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	429a      	cmp	r2, r3
 8002606:	d1eb      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d210      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	4922      	ldr	r1, [pc, #136]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff f9ae 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08003ff0 	.word	0x08003ff0
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_RCC_GetSysClockFreq+0x94>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x30>
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x36>
 80026ea:	e027      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ee:	613b      	str	r3, [r7, #16]
      break;
 80026f0:	e027      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0c9b      	lsrs	r3, r3, #18
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_GetSysClockFreq+0x94>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0c5b      	lsrs	r3, r3, #17
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	4a11      	ldr	r2, [pc, #68]	; (800275c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <HAL_RCC_GetSysClockFreq+0x98>)
 800271e:	fb03 f202 	mul.w	r2, r3, r2
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e004      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	613b      	str	r3, [r7, #16]
      break;
 800273a:	e002      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_GetSysClockFreq+0x98>)
 800273e:	613b      	str	r3, [r7, #16]
      break;
 8002740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002742:	693b      	ldr	r3, [r7, #16]
}
 8002744:	4618      	mov	r0, r3
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	007a1200 	.word	0x007a1200
 8002758:	08004000 	.word	0x08004000
 800275c:	08004010 	.word	0x08004010
 8002760:	003d0900 	.word	0x003d0900

08002764 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <RCC_Delay+0x34>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <RCC_Delay+0x38>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a5b      	lsrs	r3, r3, #9
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002780:	bf00      	nop
  }
  while (Delay --);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f9      	bne.n	8002780 <RCC_Delay+0x1c>
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000000 	.word	0x20000000
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e041      	b.n	8002836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff f87e 	bl	80018c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fa74 	bl	8002ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d001      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e03a      	b.n	80028ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00e      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d009      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_TIM_Base_Start_IT+0x9c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d010      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ba:	e007      	b.n	80028cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800

080028e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d122      	bne.n	8002940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d11b      	bne.n	8002940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0202 	mvn.w	r2, #2
 8002910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9b4 	bl	8002c94 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9a7 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f9b6 	bl	8002ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d122      	bne.n	8002994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b04      	cmp	r3, #4
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0204 	mvn.w	r2, #4
 8002964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f98a 	bl	8002c94 <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f97d 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f98c 	bl	8002ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0208 	mvn.w	r2, #8
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2204      	movs	r2, #4
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f960 	bl	8002c94 <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f953 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f962 	bl	8002ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2208      	movs	r2, #8
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f936 	bl	8002c94 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f929 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f938 	bl	8002ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0201 	mvn.w	r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fc04 	bl	8001270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d10e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d107      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa7b 	bl	8002f8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8fc 	bl	8002cb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0220 	mvn.w	r2, #32
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa46 	bl	8002f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIM_ConfigClockSource+0x1c>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e0b4      	b.n	8002c7a <HAL_TIM_ConfigClockSource+0x186>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b48:	d03e      	beq.n	8002bc8 <HAL_TIM_ConfigClockSource+0xd4>
 8002b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4e:	f200 8087 	bhi.w	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	f000 8086 	beq.w	8002c66 <HAL_TIM_ConfigClockSource+0x172>
 8002b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5e:	d87f      	bhi.n	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b60:	2b70      	cmp	r3, #112	; 0x70
 8002b62:	d01a      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0xa6>
 8002b64:	2b70      	cmp	r3, #112	; 0x70
 8002b66:	d87b      	bhi.n	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b68:	2b60      	cmp	r3, #96	; 0x60
 8002b6a:	d050      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x11a>
 8002b6c:	2b60      	cmp	r3, #96	; 0x60
 8002b6e:	d877      	bhi.n	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b70:	2b50      	cmp	r3, #80	; 0x50
 8002b72:	d03c      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0xfa>
 8002b74:	2b50      	cmp	r3, #80	; 0x50
 8002b76:	d873      	bhi.n	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d058      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x13a>
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d86f      	bhi.n	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b30      	cmp	r3, #48	; 0x30
 8002b82:	d064      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x15a>
 8002b84:	2b30      	cmp	r3, #48	; 0x30
 8002b86:	d86b      	bhi.n	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d060      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x15a>
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d867      	bhi.n	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d05c      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x15a>
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d05a      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x15a>
 8002b98:	e062      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002baa:	f000 f968 	bl	8002e7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	609a      	str	r2, [r3, #8]
      break;
 8002bc6:	e04f      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bd8:	f000 f951 	bl	8002e7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bea:	609a      	str	r2, [r3, #8]
      break;
 8002bec:	e03c      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f000 f8c8 	bl	8002d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2150      	movs	r1, #80	; 0x50
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f91f 	bl	8002e4a <TIM_ITRx_SetConfig>
      break;
 8002c0c:	e02c      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f000 f8e6 	bl	8002dec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2160      	movs	r1, #96	; 0x60
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f90f 	bl	8002e4a <TIM_ITRx_SetConfig>
      break;
 8002c2c:	e01c      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f000 f8a8 	bl	8002d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f8ff 	bl	8002e4a <TIM_ITRx_SetConfig>
      break;
 8002c4c:	e00c      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	4610      	mov	r0, r2
 8002c5a:	f000 f8f6 	bl	8002e4a <TIM_ITRx_SetConfig>
      break;
 8002c5e:	e003      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e000      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
	...

08002ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <TIM_Base_SetConfig+0xb8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <TIM_Base_SetConfig+0x30>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d007      	beq.n	8002cfc <TIM_Base_SetConfig+0x30>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <TIM_Base_SetConfig+0xbc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0x30>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a25      	ldr	r2, [pc, #148]	; (8002d8c <TIM_Base_SetConfig+0xc0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <TIM_Base_SetConfig+0xb8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x62>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x62>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <TIM_Base_SetConfig+0xbc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x62>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <TIM_Base_SetConfig+0xc0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <TIM_Base_SetConfig+0xb8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d103      	bne.n	8002d74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	615a      	str	r2, [r3, #20]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800

08002d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0201 	bic.w	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f023 030a 	bic.w	r3, r3, #10
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0210 	bic.w	r2, r3, #16
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	031b      	lsls	r3, r3, #12
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	621a      	str	r2, [r3, #32]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f043 0307 	orr.w	r3, r3, #7
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	021a      	lsls	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	609a      	str	r2, [r3, #8]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e046      	b.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00e      	beq.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d009      	beq.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d004      	beq.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10c      	bne.n	8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800

08002f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <memset>:
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4402      	add	r2, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <memset+0xa>
 8002fa4:	4770      	bx	lr
 8002fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002faa:	e7f9      	b.n	8002fa0 <memset+0x4>

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2600      	movs	r6, #0
 8002fb0:	4d0c      	ldr	r5, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1b64      	subs	r4, r4, r5
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	f001 f80c 	bl	8003fd8 <_init>
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	4d0a      	ldr	r5, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	080041f8 	.word	0x080041f8
 8002fe8:	080041f8 	.word	0x080041f8
 8002fec:	080041f8 	.word	0x080041f8
 8002ff0:	080041fc 	.word	0x080041fc

08002ff4 <sin>:
 8002ff4:	b530      	push	{r4, r5, lr}
 8002ff6:	4a20      	ldr	r2, [pc, #128]	; (8003078 <sin+0x84>)
 8002ff8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	b087      	sub	sp, #28
 8003000:	dc06      	bgt.n	8003010 <sin+0x1c>
 8003002:	2300      	movs	r3, #0
 8003004:	2200      	movs	r2, #0
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2300      	movs	r3, #0
 800300a:	f000 f8f9 	bl	8003200 <__kernel_sin>
 800300e:	e006      	b.n	800301e <sin+0x2a>
 8003010:	4a1a      	ldr	r2, [pc, #104]	; (800307c <sin+0x88>)
 8003012:	4293      	cmp	r3, r2
 8003014:	dd05      	ble.n	8003022 <sin+0x2e>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	f7fd f89d 	bl	8000158 <__aeabi_dsub>
 800301e:	b007      	add	sp, #28
 8003020:	bd30      	pop	{r4, r5, pc}
 8003022:	aa02      	add	r2, sp, #8
 8003024:	f000 f9a4 	bl	8003370 <__ieee754_rem_pio2>
 8003028:	f000 0003 	and.w	r0, r0, #3
 800302c:	2801      	cmp	r0, #1
 800302e:	d009      	beq.n	8003044 <sin+0x50>
 8003030:	2802      	cmp	r0, #2
 8003032:	d00e      	beq.n	8003052 <sin+0x5e>
 8003034:	b9c0      	cbnz	r0, 8003068 <sin+0x74>
 8003036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800303a:	2301      	movs	r3, #1
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003042:	e7e2      	b.n	800300a <sin+0x16>
 8003044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800304c:	f000 f818 	bl	8003080 <__kernel_cos>
 8003050:	e7e5      	b.n	800301e <sin+0x2a>
 8003052:	2301      	movs	r3, #1
 8003054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800305e:	f000 f8cf 	bl	8003200 <__kernel_sin>
 8003062:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003066:	e7da      	b.n	800301e <sin+0x2a>
 8003068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800306c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003070:	f000 f806 	bl	8003080 <__kernel_cos>
 8003074:	e7f5      	b.n	8003062 <sin+0x6e>
 8003076:	bf00      	nop
 8003078:	3fe921fb 	.word	0x3fe921fb
 800307c:	7fefffff 	.word	0x7fefffff

08003080 <__kernel_cos>:
 8003080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003084:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003088:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800308c:	4680      	mov	r8, r0
 800308e:	460f      	mov	r7, r1
 8003090:	e9cd 2300 	strd	r2, r3, [sp]
 8003094:	da04      	bge.n	80030a0 <__kernel_cos+0x20>
 8003096:	f7fd fcb1 	bl	80009fc <__aeabi_d2iz>
 800309a:	2800      	cmp	r0, #0
 800309c:	f000 8086 	beq.w	80031ac <__kernel_cos+0x12c>
 80030a0:	4642      	mov	r2, r8
 80030a2:	463b      	mov	r3, r7
 80030a4:	4640      	mov	r0, r8
 80030a6:	4639      	mov	r1, r7
 80030a8:	f7fd fa0e 	bl	80004c8 <__aeabi_dmul>
 80030ac:	2200      	movs	r2, #0
 80030ae:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <__kernel_cos+0x168>)
 80030b0:	4604      	mov	r4, r0
 80030b2:	460d      	mov	r5, r1
 80030b4:	f7fd fa08 	bl	80004c8 <__aeabi_dmul>
 80030b8:	a33f      	add	r3, pc, #252	; (adr r3, 80031b8 <__kernel_cos+0x138>)
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	4682      	mov	sl, r0
 80030c0:	468b      	mov	fp, r1
 80030c2:	4620      	mov	r0, r4
 80030c4:	4629      	mov	r1, r5
 80030c6:	f7fd f9ff 	bl	80004c8 <__aeabi_dmul>
 80030ca:	a33d      	add	r3, pc, #244	; (adr r3, 80031c0 <__kernel_cos+0x140>)
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f7fd f844 	bl	800015c <__adddf3>
 80030d4:	4622      	mov	r2, r4
 80030d6:	462b      	mov	r3, r5
 80030d8:	f7fd f9f6 	bl	80004c8 <__aeabi_dmul>
 80030dc:	a33a      	add	r3, pc, #232	; (adr r3, 80031c8 <__kernel_cos+0x148>)
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	f7fd f839 	bl	8000158 <__aeabi_dsub>
 80030e6:	4622      	mov	r2, r4
 80030e8:	462b      	mov	r3, r5
 80030ea:	f7fd f9ed 	bl	80004c8 <__aeabi_dmul>
 80030ee:	a338      	add	r3, pc, #224	; (adr r3, 80031d0 <__kernel_cos+0x150>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f7fd f832 	bl	800015c <__adddf3>
 80030f8:	4622      	mov	r2, r4
 80030fa:	462b      	mov	r3, r5
 80030fc:	f7fd f9e4 	bl	80004c8 <__aeabi_dmul>
 8003100:	a335      	add	r3, pc, #212	; (adr r3, 80031d8 <__kernel_cos+0x158>)
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f7fd f827 	bl	8000158 <__aeabi_dsub>
 800310a:	4622      	mov	r2, r4
 800310c:	462b      	mov	r3, r5
 800310e:	f7fd f9db 	bl	80004c8 <__aeabi_dmul>
 8003112:	a333      	add	r3, pc, #204	; (adr r3, 80031e0 <__kernel_cos+0x160>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f7fd f820 	bl	800015c <__adddf3>
 800311c:	4622      	mov	r2, r4
 800311e:	462b      	mov	r3, r5
 8003120:	f7fd f9d2 	bl	80004c8 <__aeabi_dmul>
 8003124:	4622      	mov	r2, r4
 8003126:	462b      	mov	r3, r5
 8003128:	f7fd f9ce 	bl	80004c8 <__aeabi_dmul>
 800312c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003130:	4604      	mov	r4, r0
 8003132:	460d      	mov	r5, r1
 8003134:	4640      	mov	r0, r8
 8003136:	4639      	mov	r1, r7
 8003138:	f7fd f9c6 	bl	80004c8 <__aeabi_dmul>
 800313c:	460b      	mov	r3, r1
 800313e:	4602      	mov	r2, r0
 8003140:	4629      	mov	r1, r5
 8003142:	4620      	mov	r0, r4
 8003144:	f7fd f808 	bl	8000158 <__aeabi_dsub>
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <__kernel_cos+0x16c>)
 800314a:	4680      	mov	r8, r0
 800314c:	429e      	cmp	r6, r3
 800314e:	4689      	mov	r9, r1
 8003150:	dc0e      	bgt.n	8003170 <__kernel_cos+0xf0>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4650      	mov	r0, sl
 8003158:	4659      	mov	r1, fp
 800315a:	f7fc fffd 	bl	8000158 <__aeabi_dsub>
 800315e:	4602      	mov	r2, r0
 8003160:	2000      	movs	r0, #0
 8003162:	460b      	mov	r3, r1
 8003164:	4922      	ldr	r1, [pc, #136]	; (80031f0 <__kernel_cos+0x170>)
 8003166:	f7fc fff7 	bl	8000158 <__aeabi_dsub>
 800316a:	b003      	add	sp, #12
 800316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003170:	2400      	movs	r4, #0
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <__kernel_cos+0x174>)
 8003174:	4622      	mov	r2, r4
 8003176:	429e      	cmp	r6, r3
 8003178:	bfcc      	ite	gt
 800317a:	4d1f      	ldrgt	r5, [pc, #124]	; (80031f8 <__kernel_cos+0x178>)
 800317c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003180:	462b      	mov	r3, r5
 8003182:	2000      	movs	r0, #0
 8003184:	491a      	ldr	r1, [pc, #104]	; (80031f0 <__kernel_cos+0x170>)
 8003186:	f7fc ffe7 	bl	8000158 <__aeabi_dsub>
 800318a:	4622      	mov	r2, r4
 800318c:	4606      	mov	r6, r0
 800318e:	460f      	mov	r7, r1
 8003190:	462b      	mov	r3, r5
 8003192:	4650      	mov	r0, sl
 8003194:	4659      	mov	r1, fp
 8003196:	f7fc ffdf 	bl	8000158 <__aeabi_dsub>
 800319a:	4642      	mov	r2, r8
 800319c:	464b      	mov	r3, r9
 800319e:	f7fc ffdb 	bl	8000158 <__aeabi_dsub>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4630      	mov	r0, r6
 80031a8:	4639      	mov	r1, r7
 80031aa:	e7dc      	b.n	8003166 <__kernel_cos+0xe6>
 80031ac:	2000      	movs	r0, #0
 80031ae:	4910      	ldr	r1, [pc, #64]	; (80031f0 <__kernel_cos+0x170>)
 80031b0:	e7db      	b.n	800316a <__kernel_cos+0xea>
 80031b2:	bf00      	nop
 80031b4:	f3af 8000 	nop.w
 80031b8:	be8838d4 	.word	0xbe8838d4
 80031bc:	bda8fae9 	.word	0xbda8fae9
 80031c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80031c4:	3e21ee9e 	.word	0x3e21ee9e
 80031c8:	809c52ad 	.word	0x809c52ad
 80031cc:	3e927e4f 	.word	0x3e927e4f
 80031d0:	19cb1590 	.word	0x19cb1590
 80031d4:	3efa01a0 	.word	0x3efa01a0
 80031d8:	16c15177 	.word	0x16c15177
 80031dc:	3f56c16c 	.word	0x3f56c16c
 80031e0:	5555554c 	.word	0x5555554c
 80031e4:	3fa55555 	.word	0x3fa55555
 80031e8:	3fe00000 	.word	0x3fe00000
 80031ec:	3fd33332 	.word	0x3fd33332
 80031f0:	3ff00000 	.word	0x3ff00000
 80031f4:	3fe90000 	.word	0x3fe90000
 80031f8:	3fd20000 	.word	0x3fd20000
 80031fc:	00000000 	.word	0x00000000

08003200 <__kernel_sin>:
 8003200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	e9cd 2300 	strd	r2, r3, [sp]
 800320a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800320e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003212:	4682      	mov	sl, r0
 8003214:	460c      	mov	r4, r1
 8003216:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003218:	da03      	bge.n	8003222 <__kernel_sin+0x22>
 800321a:	f7fd fbef 	bl	80009fc <__aeabi_d2iz>
 800321e:	2800      	cmp	r0, #0
 8003220:	d050      	beq.n	80032c4 <__kernel_sin+0xc4>
 8003222:	4652      	mov	r2, sl
 8003224:	4623      	mov	r3, r4
 8003226:	4650      	mov	r0, sl
 8003228:	4621      	mov	r1, r4
 800322a:	f7fd f94d 	bl	80004c8 <__aeabi_dmul>
 800322e:	4606      	mov	r6, r0
 8003230:	460f      	mov	r7, r1
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4650      	mov	r0, sl
 8003238:	4621      	mov	r1, r4
 800323a:	f7fd f945 	bl	80004c8 <__aeabi_dmul>
 800323e:	a33e      	add	r3, pc, #248	; (adr r3, 8003338 <__kernel_sin+0x138>)
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	4680      	mov	r8, r0
 8003246:	4689      	mov	r9, r1
 8003248:	4630      	mov	r0, r6
 800324a:	4639      	mov	r1, r7
 800324c:	f7fd f93c 	bl	80004c8 <__aeabi_dmul>
 8003250:	a33b      	add	r3, pc, #236	; (adr r3, 8003340 <__kernel_sin+0x140>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fc ff7f 	bl	8000158 <__aeabi_dsub>
 800325a:	4632      	mov	r2, r6
 800325c:	463b      	mov	r3, r7
 800325e:	f7fd f933 	bl	80004c8 <__aeabi_dmul>
 8003262:	a339      	add	r3, pc, #228	; (adr r3, 8003348 <__kernel_sin+0x148>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f7fc ff78 	bl	800015c <__adddf3>
 800326c:	4632      	mov	r2, r6
 800326e:	463b      	mov	r3, r7
 8003270:	f7fd f92a 	bl	80004c8 <__aeabi_dmul>
 8003274:	a336      	add	r3, pc, #216	; (adr r3, 8003350 <__kernel_sin+0x150>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fc ff6d 	bl	8000158 <__aeabi_dsub>
 800327e:	4632      	mov	r2, r6
 8003280:	463b      	mov	r3, r7
 8003282:	f7fd f921 	bl	80004c8 <__aeabi_dmul>
 8003286:	a334      	add	r3, pc, #208	; (adr r3, 8003358 <__kernel_sin+0x158>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fc ff66 	bl	800015c <__adddf3>
 8003290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003294:	b9dd      	cbnz	r5, 80032ce <__kernel_sin+0xce>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4630      	mov	r0, r6
 800329c:	4639      	mov	r1, r7
 800329e:	f7fd f913 	bl	80004c8 <__aeabi_dmul>
 80032a2:	a32f      	add	r3, pc, #188	; (adr r3, 8003360 <__kernel_sin+0x160>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fc ff56 	bl	8000158 <__aeabi_dsub>
 80032ac:	4642      	mov	r2, r8
 80032ae:	464b      	mov	r3, r9
 80032b0:	f7fd f90a 	bl	80004c8 <__aeabi_dmul>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4650      	mov	r0, sl
 80032ba:	4621      	mov	r1, r4
 80032bc:	f7fc ff4e 	bl	800015c <__adddf3>
 80032c0:	4682      	mov	sl, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	4650      	mov	r0, sl
 80032c6:	4621      	mov	r1, r4
 80032c8:	b006      	add	sp, #24
 80032ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ce:	2200      	movs	r2, #0
 80032d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <__kernel_sin+0x168>)
 80032d6:	f7fd f8f7 	bl	80004c8 <__aeabi_dmul>
 80032da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032e2:	4640      	mov	r0, r8
 80032e4:	4649      	mov	r1, r9
 80032e6:	f7fd f8ef 	bl	80004c8 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032f2:	f7fc ff31 	bl	8000158 <__aeabi_dsub>
 80032f6:	4632      	mov	r2, r6
 80032f8:	463b      	mov	r3, r7
 80032fa:	f7fd f8e5 	bl	80004c8 <__aeabi_dmul>
 80032fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003302:	f7fc ff29 	bl	8000158 <__aeabi_dsub>
 8003306:	a316      	add	r3, pc, #88	; (adr r3, 8003360 <__kernel_sin+0x160>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	4606      	mov	r6, r0
 800330e:	460f      	mov	r7, r1
 8003310:	4640      	mov	r0, r8
 8003312:	4649      	mov	r1, r9
 8003314:	f7fd f8d8 	bl	80004c8 <__aeabi_dmul>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4630      	mov	r0, r6
 800331e:	4639      	mov	r1, r7
 8003320:	f7fc ff1c 	bl	800015c <__adddf3>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4650      	mov	r0, sl
 800332a:	4621      	mov	r1, r4
 800332c:	f7fc ff14 	bl	8000158 <__aeabi_dsub>
 8003330:	e7c6      	b.n	80032c0 <__kernel_sin+0xc0>
 8003332:	bf00      	nop
 8003334:	f3af 8000 	nop.w
 8003338:	5acfd57c 	.word	0x5acfd57c
 800333c:	3de5d93a 	.word	0x3de5d93a
 8003340:	8a2b9ceb 	.word	0x8a2b9ceb
 8003344:	3e5ae5e6 	.word	0x3e5ae5e6
 8003348:	57b1fe7d 	.word	0x57b1fe7d
 800334c:	3ec71de3 	.word	0x3ec71de3
 8003350:	19c161d5 	.word	0x19c161d5
 8003354:	3f2a01a0 	.word	0x3f2a01a0
 8003358:	1110f8a6 	.word	0x1110f8a6
 800335c:	3f811111 	.word	0x3f811111
 8003360:	55555549 	.word	0x55555549
 8003364:	3fc55555 	.word	0x3fc55555
 8003368:	3fe00000 	.word	0x3fe00000
 800336c:	00000000 	.word	0x00000000

08003370 <__ieee754_rem_pio2>:
 8003370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	4614      	mov	r4, r2
 8003376:	4ac2      	ldr	r2, [pc, #776]	; (8003680 <__ieee754_rem_pio2+0x310>)
 8003378:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800337c:	b08d      	sub	sp, #52	; 0x34
 800337e:	4592      	cmp	sl, r2
 8003380:	9104      	str	r1, [sp, #16]
 8003382:	dc07      	bgt.n	8003394 <__ieee754_rem_pio2+0x24>
 8003384:	2200      	movs	r2, #0
 8003386:	2300      	movs	r3, #0
 8003388:	e9c4 0100 	strd	r0, r1, [r4]
 800338c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003390:	2500      	movs	r5, #0
 8003392:	e024      	b.n	80033de <__ieee754_rem_pio2+0x6e>
 8003394:	4abb      	ldr	r2, [pc, #748]	; (8003684 <__ieee754_rem_pio2+0x314>)
 8003396:	4592      	cmp	sl, r2
 8003398:	dc72      	bgt.n	8003480 <__ieee754_rem_pio2+0x110>
 800339a:	9b04      	ldr	r3, [sp, #16]
 800339c:	4dba      	ldr	r5, [pc, #744]	; (8003688 <__ieee754_rem_pio2+0x318>)
 800339e:	2b00      	cmp	r3, #0
 80033a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8003648 <__ieee754_rem_pio2+0x2d8>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	dd36      	ble.n	8003416 <__ieee754_rem_pio2+0xa6>
 80033a8:	f7fc fed6 	bl	8000158 <__aeabi_dsub>
 80033ac:	45aa      	cmp	sl, r5
 80033ae:	4606      	mov	r6, r0
 80033b0:	460f      	mov	r7, r1
 80033b2:	d018      	beq.n	80033e6 <__ieee754_rem_pio2+0x76>
 80033b4:	a3a6      	add	r3, pc, #664	; (adr r3, 8003650 <__ieee754_rem_pio2+0x2e0>)
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	f7fc fecd 	bl	8000158 <__aeabi_dsub>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4630      	mov	r0, r6
 80033c4:	e9c4 2300 	strd	r2, r3, [r4]
 80033c8:	4639      	mov	r1, r7
 80033ca:	f7fc fec5 	bl	8000158 <__aeabi_dsub>
 80033ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8003650 <__ieee754_rem_pio2+0x2e0>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fc fec0 	bl	8000158 <__aeabi_dsub>
 80033d8:	2501      	movs	r5, #1
 80033da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80033de:	4628      	mov	r0, r5
 80033e0:	b00d      	add	sp, #52	; 0x34
 80033e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e6:	a39c      	add	r3, pc, #624	; (adr r3, 8003658 <__ieee754_rem_pio2+0x2e8>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fc feb4 	bl	8000158 <__aeabi_dsub>
 80033f0:	a39b      	add	r3, pc, #620	; (adr r3, 8003660 <__ieee754_rem_pio2+0x2f0>)
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	4606      	mov	r6, r0
 80033f8:	460f      	mov	r7, r1
 80033fa:	f7fc fead 	bl	8000158 <__aeabi_dsub>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4630      	mov	r0, r6
 8003404:	e9c4 2300 	strd	r2, r3, [r4]
 8003408:	4639      	mov	r1, r7
 800340a:	f7fc fea5 	bl	8000158 <__aeabi_dsub>
 800340e:	a394      	add	r3, pc, #592	; (adr r3, 8003660 <__ieee754_rem_pio2+0x2f0>)
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	e7de      	b.n	80033d4 <__ieee754_rem_pio2+0x64>
 8003416:	f7fc fea1 	bl	800015c <__adddf3>
 800341a:	45aa      	cmp	sl, r5
 800341c:	4606      	mov	r6, r0
 800341e:	460f      	mov	r7, r1
 8003420:	d016      	beq.n	8003450 <__ieee754_rem_pio2+0xe0>
 8003422:	a38b      	add	r3, pc, #556	; (adr r3, 8003650 <__ieee754_rem_pio2+0x2e0>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fc fe98 	bl	800015c <__adddf3>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4630      	mov	r0, r6
 8003432:	e9c4 2300 	strd	r2, r3, [r4]
 8003436:	4639      	mov	r1, r7
 8003438:	f7fc fe8e 	bl	8000158 <__aeabi_dsub>
 800343c:	a384      	add	r3, pc, #528	; (adr r3, 8003650 <__ieee754_rem_pio2+0x2e0>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fc fe8b 	bl	800015c <__adddf3>
 8003446:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800344a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800344e:	e7c6      	b.n	80033de <__ieee754_rem_pio2+0x6e>
 8003450:	a381      	add	r3, pc, #516	; (adr r3, 8003658 <__ieee754_rem_pio2+0x2e8>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f7fc fe81 	bl	800015c <__adddf3>
 800345a:	a381      	add	r3, pc, #516	; (adr r3, 8003660 <__ieee754_rem_pio2+0x2f0>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	4606      	mov	r6, r0
 8003462:	460f      	mov	r7, r1
 8003464:	f7fc fe7a 	bl	800015c <__adddf3>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4630      	mov	r0, r6
 800346e:	e9c4 2300 	strd	r2, r3, [r4]
 8003472:	4639      	mov	r1, r7
 8003474:	f7fc fe70 	bl	8000158 <__aeabi_dsub>
 8003478:	a379      	add	r3, pc, #484	; (adr r3, 8003660 <__ieee754_rem_pio2+0x2f0>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	e7e0      	b.n	8003442 <__ieee754_rem_pio2+0xd2>
 8003480:	4a82      	ldr	r2, [pc, #520]	; (800368c <__ieee754_rem_pio2+0x31c>)
 8003482:	4592      	cmp	sl, r2
 8003484:	f300 80d4 	bgt.w	8003630 <__ieee754_rem_pio2+0x2c0>
 8003488:	f000 f966 	bl	8003758 <fabs>
 800348c:	a376      	add	r3, pc, #472	; (adr r3, 8003668 <__ieee754_rem_pio2+0x2f8>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	4606      	mov	r6, r0
 8003494:	460f      	mov	r7, r1
 8003496:	f7fd f817 	bl	80004c8 <__aeabi_dmul>
 800349a:	2200      	movs	r2, #0
 800349c:	4b7c      	ldr	r3, [pc, #496]	; (8003690 <__ieee754_rem_pio2+0x320>)
 800349e:	f7fc fe5d 	bl	800015c <__adddf3>
 80034a2:	f7fd faab 	bl	80009fc <__aeabi_d2iz>
 80034a6:	4605      	mov	r5, r0
 80034a8:	f7fc ffa4 	bl	80003f4 <__aeabi_i2d>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034b4:	a364      	add	r3, pc, #400	; (adr r3, 8003648 <__ieee754_rem_pio2+0x2d8>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f7fd f805 	bl	80004c8 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4630      	mov	r0, r6
 80034c4:	4639      	mov	r1, r7
 80034c6:	f7fc fe47 	bl	8000158 <__aeabi_dsub>
 80034ca:	a361      	add	r3, pc, #388	; (adr r3, 8003650 <__ieee754_rem_pio2+0x2e0>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	4680      	mov	r8, r0
 80034d2:	4689      	mov	r9, r1
 80034d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034d8:	f7fc fff6 	bl	80004c8 <__aeabi_dmul>
 80034dc:	2d1f      	cmp	r5, #31
 80034de:	4606      	mov	r6, r0
 80034e0:	460f      	mov	r7, r1
 80034e2:	dc0e      	bgt.n	8003502 <__ieee754_rem_pio2+0x192>
 80034e4:	4b6b      	ldr	r3, [pc, #428]	; (8003694 <__ieee754_rem_pio2+0x324>)
 80034e6:	1e6a      	subs	r2, r5, #1
 80034e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ec:	4553      	cmp	r3, sl
 80034ee:	d008      	beq.n	8003502 <__ieee754_rem_pio2+0x192>
 80034f0:	4632      	mov	r2, r6
 80034f2:	463b      	mov	r3, r7
 80034f4:	4640      	mov	r0, r8
 80034f6:	4649      	mov	r1, r9
 80034f8:	f7fc fe2e 	bl	8000158 <__aeabi_dsub>
 80034fc:	e9c4 0100 	strd	r0, r1, [r4]
 8003500:	e012      	b.n	8003528 <__ieee754_rem_pio2+0x1b8>
 8003502:	463b      	mov	r3, r7
 8003504:	4632      	mov	r2, r6
 8003506:	4640      	mov	r0, r8
 8003508:	4649      	mov	r1, r9
 800350a:	f7fc fe25 	bl	8000158 <__aeabi_dsub>
 800350e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8003512:	9305      	str	r3, [sp, #20]
 8003514:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003518:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800351c:	2b10      	cmp	r3, #16
 800351e:	dc1f      	bgt.n	8003560 <__ieee754_rem_pio2+0x1f0>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	e9c4 2300 	strd	r2, r3, [r4]
 8003528:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800352c:	4640      	mov	r0, r8
 800352e:	4653      	mov	r3, sl
 8003530:	4649      	mov	r1, r9
 8003532:	f7fc fe11 	bl	8000158 <__aeabi_dsub>
 8003536:	4632      	mov	r2, r6
 8003538:	463b      	mov	r3, r7
 800353a:	f7fc fe0d 	bl	8000158 <__aeabi_dsub>
 800353e:	460b      	mov	r3, r1
 8003540:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003544:	9904      	ldr	r1, [sp, #16]
 8003546:	4602      	mov	r2, r0
 8003548:	2900      	cmp	r1, #0
 800354a:	f6bf af48 	bge.w	80033de <__ieee754_rem_pio2+0x6e>
 800354e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8003552:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003556:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800355a:	60e3      	str	r3, [r4, #12]
 800355c:	426d      	negs	r5, r5
 800355e:	e73e      	b.n	80033de <__ieee754_rem_pio2+0x6e>
 8003560:	a33d      	add	r3, pc, #244	; (adr r3, 8003658 <__ieee754_rem_pio2+0x2e8>)
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800356a:	f7fc ffad 	bl	80004c8 <__aeabi_dmul>
 800356e:	4606      	mov	r6, r0
 8003570:	460f      	mov	r7, r1
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4640      	mov	r0, r8
 8003578:	4649      	mov	r1, r9
 800357a:	f7fc fded 	bl	8000158 <__aeabi_dsub>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4682      	mov	sl, r0
 8003584:	468b      	mov	fp, r1
 8003586:	4640      	mov	r0, r8
 8003588:	4649      	mov	r1, r9
 800358a:	f7fc fde5 	bl	8000158 <__aeabi_dsub>
 800358e:	4632      	mov	r2, r6
 8003590:	463b      	mov	r3, r7
 8003592:	f7fc fde1 	bl	8000158 <__aeabi_dsub>
 8003596:	a332      	add	r3, pc, #200	; (adr r3, 8003660 <__ieee754_rem_pio2+0x2f0>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	4606      	mov	r6, r0
 800359e:	460f      	mov	r7, r1
 80035a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035a4:	f7fc ff90 	bl	80004c8 <__aeabi_dmul>
 80035a8:	4632      	mov	r2, r6
 80035aa:	463b      	mov	r3, r7
 80035ac:	f7fc fdd4 	bl	8000158 <__aeabi_dsub>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4606      	mov	r6, r0
 80035b6:	460f      	mov	r7, r1
 80035b8:	4650      	mov	r0, sl
 80035ba:	4659      	mov	r1, fp
 80035bc:	f7fc fdcc 	bl	8000158 <__aeabi_dsub>
 80035c0:	9a05      	ldr	r2, [sp, #20]
 80035c2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b31      	cmp	r3, #49	; 0x31
 80035ca:	dc06      	bgt.n	80035da <__ieee754_rem_pio2+0x26a>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	46d0      	mov	r8, sl
 80035d2:	46d9      	mov	r9, fp
 80035d4:	e9c4 2300 	strd	r2, r3, [r4]
 80035d8:	e7a6      	b.n	8003528 <__ieee754_rem_pio2+0x1b8>
 80035da:	a325      	add	r3, pc, #148	; (adr r3, 8003670 <__ieee754_rem_pio2+0x300>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035e4:	f7fc ff70 	bl	80004c8 <__aeabi_dmul>
 80035e8:	4606      	mov	r6, r0
 80035ea:	460f      	mov	r7, r1
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4650      	mov	r0, sl
 80035f2:	4659      	mov	r1, fp
 80035f4:	f7fc fdb0 	bl	8000158 <__aeabi_dsub>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4680      	mov	r8, r0
 80035fe:	4689      	mov	r9, r1
 8003600:	4650      	mov	r0, sl
 8003602:	4659      	mov	r1, fp
 8003604:	f7fc fda8 	bl	8000158 <__aeabi_dsub>
 8003608:	4632      	mov	r2, r6
 800360a:	463b      	mov	r3, r7
 800360c:	f7fc fda4 	bl	8000158 <__aeabi_dsub>
 8003610:	a319      	add	r3, pc, #100	; (adr r3, 8003678 <__ieee754_rem_pio2+0x308>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	4606      	mov	r6, r0
 8003618:	460f      	mov	r7, r1
 800361a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800361e:	f7fc ff53 	bl	80004c8 <__aeabi_dmul>
 8003622:	4632      	mov	r2, r6
 8003624:	463b      	mov	r3, r7
 8003626:	f7fc fd97 	bl	8000158 <__aeabi_dsub>
 800362a:	4606      	mov	r6, r0
 800362c:	460f      	mov	r7, r1
 800362e:	e75f      	b.n	80034f0 <__ieee754_rem_pio2+0x180>
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <__ieee754_rem_pio2+0x328>)
 8003632:	4592      	cmp	sl, r2
 8003634:	dd32      	ble.n	800369c <__ieee754_rem_pio2+0x32c>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	f7fc fd8d 	bl	8000158 <__aeabi_dsub>
 800363e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003642:	e9c4 0100 	strd	r0, r1, [r4]
 8003646:	e6a3      	b.n	8003390 <__ieee754_rem_pio2+0x20>
 8003648:	54400000 	.word	0x54400000
 800364c:	3ff921fb 	.word	0x3ff921fb
 8003650:	1a626331 	.word	0x1a626331
 8003654:	3dd0b461 	.word	0x3dd0b461
 8003658:	1a600000 	.word	0x1a600000
 800365c:	3dd0b461 	.word	0x3dd0b461
 8003660:	2e037073 	.word	0x2e037073
 8003664:	3ba3198a 	.word	0x3ba3198a
 8003668:	6dc9c883 	.word	0x6dc9c883
 800366c:	3fe45f30 	.word	0x3fe45f30
 8003670:	2e000000 	.word	0x2e000000
 8003674:	3ba3198a 	.word	0x3ba3198a
 8003678:	252049c1 	.word	0x252049c1
 800367c:	397b839a 	.word	0x397b839a
 8003680:	3fe921fb 	.word	0x3fe921fb
 8003684:	4002d97b 	.word	0x4002d97b
 8003688:	3ff921fb 	.word	0x3ff921fb
 800368c:	413921fb 	.word	0x413921fb
 8003690:	3fe00000 	.word	0x3fe00000
 8003694:	08004014 	.word	0x08004014
 8003698:	7fefffff 	.word	0x7fefffff
 800369c:	ea4f 552a 	mov.w	r5, sl, asr #20
 80036a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80036a4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80036a8:	460f      	mov	r7, r1
 80036aa:	4606      	mov	r6, r0
 80036ac:	f7fd f9a6 	bl	80009fc <__aeabi_d2iz>
 80036b0:	f7fc fea0 	bl	80003f4 <__aeabi_i2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4630      	mov	r0, r6
 80036ba:	4639      	mov	r1, r7
 80036bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80036c0:	f7fc fd4a 	bl	8000158 <__aeabi_dsub>
 80036c4:	2200      	movs	r2, #0
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <__ieee754_rem_pio2+0x3e0>)
 80036c8:	f7fc fefe 	bl	80004c8 <__aeabi_dmul>
 80036cc:	460f      	mov	r7, r1
 80036ce:	4606      	mov	r6, r0
 80036d0:	f7fd f994 	bl	80009fc <__aeabi_d2iz>
 80036d4:	f7fc fe8e 	bl	80003f4 <__aeabi_i2d>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4630      	mov	r0, r6
 80036de:	4639      	mov	r1, r7
 80036e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80036e4:	f7fc fd38 	bl	8000158 <__aeabi_dsub>
 80036e8:	2200      	movs	r2, #0
 80036ea:	4b19      	ldr	r3, [pc, #100]	; (8003750 <__ieee754_rem_pio2+0x3e0>)
 80036ec:	f7fc feec 	bl	80004c8 <__aeabi_dmul>
 80036f0:	f04f 0803 	mov.w	r8, #3
 80036f4:	2600      	movs	r6, #0
 80036f6:	2700      	movs	r7, #0
 80036f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80036fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003700:	4632      	mov	r2, r6
 8003702:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003706:	463b      	mov	r3, r7
 8003708:	46c2      	mov	sl, r8
 800370a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800370e:	f7fd f943 	bl	8000998 <__aeabi_dcmpeq>
 8003712:	2800      	cmp	r0, #0
 8003714:	d1f4      	bne.n	8003700 <__ieee754_rem_pio2+0x390>
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <__ieee754_rem_pio2+0x3e4>)
 8003718:	462a      	mov	r2, r5
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2302      	movs	r3, #2
 800371e:	4621      	mov	r1, r4
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	a806      	add	r0, sp, #24
 8003724:	4653      	mov	r3, sl
 8003726:	f000 f81b 	bl	8003760 <__kernel_rem_pio2>
 800372a:	9b04      	ldr	r3, [sp, #16]
 800372c:	4605      	mov	r5, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	f6bf ae55 	bge.w	80033de <__ieee754_rem_pio2+0x6e>
 8003734:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800373c:	e9c4 2300 	strd	r2, r3, [r4]
 8003740:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003744:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003748:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800374c:	e706      	b.n	800355c <__ieee754_rem_pio2+0x1ec>
 800374e:	bf00      	nop
 8003750:	41700000 	.word	0x41700000
 8003754:	08004094 	.word	0x08004094

08003758 <fabs>:
 8003758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800375c:	4619      	mov	r1, r3
 800375e:	4770      	bx	lr

08003760 <__kernel_rem_pio2>:
 8003760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003764:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003768:	9308      	str	r3, [sp, #32]
 800376a:	9106      	str	r1, [sp, #24]
 800376c:	4bb6      	ldr	r3, [pc, #728]	; (8003a48 <__kernel_rem_pio2+0x2e8>)
 800376e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003770:	f112 0f14 	cmn.w	r2, #20
 8003774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003778:	bfa8      	it	ge
 800377a:	1ed4      	subge	r4, r2, #3
 800377c:	9302      	str	r3, [sp, #8]
 800377e:	9b08      	ldr	r3, [sp, #32]
 8003780:	bfb8      	it	lt
 8003782:	2400      	movlt	r4, #0
 8003784:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003788:	9307      	str	r3, [sp, #28]
 800378a:	bfa4      	itt	ge
 800378c:	2318      	movge	r3, #24
 800378e:	fb94 f4f3 	sdivge	r4, r4, r3
 8003792:	f06f 0317 	mvn.w	r3, #23
 8003796:	fb04 3303 	mla	r3, r4, r3, r3
 800379a:	eb03 0b02 	add.w	fp, r3, r2
 800379e:	9a07      	ldr	r2, [sp, #28]
 80037a0:	9b02      	ldr	r3, [sp, #8]
 80037a2:	1aa7      	subs	r7, r4, r2
 80037a4:	eb03 0802 	add.w	r8, r3, r2
 80037a8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80037aa:	2500      	movs	r5, #0
 80037ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80037b0:	2200      	movs	r2, #0
 80037b2:	2300      	movs	r3, #0
 80037b4:	9009      	str	r0, [sp, #36]	; 0x24
 80037b6:	ae20      	add	r6, sp, #128	; 0x80
 80037b8:	4545      	cmp	r5, r8
 80037ba:	dd14      	ble.n	80037e6 <__kernel_rem_pio2+0x86>
 80037bc:	f04f 0800 	mov.w	r8, #0
 80037c0:	9a08      	ldr	r2, [sp, #32]
 80037c2:	ab20      	add	r3, sp, #128	; 0x80
 80037c4:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80037c8:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80037cc:	9b02      	ldr	r3, [sp, #8]
 80037ce:	4598      	cmp	r8, r3
 80037d0:	dc35      	bgt.n	800383e <__kernel_rem_pio2+0xde>
 80037d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037d4:	2200      	movs	r2, #0
 80037d6:	f1a3 0908 	sub.w	r9, r3, #8
 80037da:	2300      	movs	r3, #0
 80037dc:	462f      	mov	r7, r5
 80037de:	2600      	movs	r6, #0
 80037e0:	e9cd 2300 	strd	r2, r3, [sp]
 80037e4:	e01f      	b.n	8003826 <__kernel_rem_pio2+0xc6>
 80037e6:	42ef      	cmn	r7, r5
 80037e8:	d40b      	bmi.n	8003802 <__kernel_rem_pio2+0xa2>
 80037ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80037ee:	e9cd 2300 	strd	r2, r3, [sp]
 80037f2:	f7fc fdff 	bl	80003f4 <__aeabi_i2d>
 80037f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80037fe:	3501      	adds	r5, #1
 8003800:	e7da      	b.n	80037b8 <__kernel_rem_pio2+0x58>
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	e7f8      	b.n	80037fa <__kernel_rem_pio2+0x9a>
 8003808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800380c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003810:	f7fc fe5a 	bl	80004c8 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800381c:	f7fc fc9e 	bl	800015c <__adddf3>
 8003820:	e9cd 0100 	strd	r0, r1, [sp]
 8003824:	3601      	adds	r6, #1
 8003826:	9b07      	ldr	r3, [sp, #28]
 8003828:	3f08      	subs	r7, #8
 800382a:	429e      	cmp	r6, r3
 800382c:	ddec      	ble.n	8003808 <__kernel_rem_pio2+0xa8>
 800382e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003832:	f108 0801 	add.w	r8, r8, #1
 8003836:	e8ea 2302 	strd	r2, r3, [sl], #8
 800383a:	3508      	adds	r5, #8
 800383c:	e7c6      	b.n	80037cc <__kernel_rem_pio2+0x6c>
 800383e:	9b02      	ldr	r3, [sp, #8]
 8003840:	aa0c      	add	r2, sp, #48	; 0x30
 8003842:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003846:	930b      	str	r3, [sp, #44]	; 0x2c
 8003848:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800384a:	9e02      	ldr	r6, [sp, #8]
 800384c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003850:	930a      	str	r3, [sp, #40]	; 0x28
 8003852:	ab98      	add	r3, sp, #608	; 0x260
 8003854:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003858:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800385c:	ab70      	add	r3, sp, #448	; 0x1c0
 800385e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8003862:	46d0      	mov	r8, sl
 8003864:	46b1      	mov	r9, r6
 8003866:	af0c      	add	r7, sp, #48	; 0x30
 8003868:	9700      	str	r7, [sp, #0]
 800386a:	f1b9 0f00 	cmp.w	r9, #0
 800386e:	f1a8 0808 	sub.w	r8, r8, #8
 8003872:	dc70      	bgt.n	8003956 <__kernel_rem_pio2+0x1f6>
 8003874:	465a      	mov	r2, fp
 8003876:	4620      	mov	r0, r4
 8003878:	4629      	mov	r1, r5
 800387a:	f000 fab1 	bl	8003de0 <scalbn>
 800387e:	2200      	movs	r2, #0
 8003880:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003884:	4604      	mov	r4, r0
 8003886:	460d      	mov	r5, r1
 8003888:	f7fc fe1e 	bl	80004c8 <__aeabi_dmul>
 800388c:	f000 fb24 	bl	8003ed8 <floor>
 8003890:	2200      	movs	r2, #0
 8003892:	4b6e      	ldr	r3, [pc, #440]	; (8003a4c <__kernel_rem_pio2+0x2ec>)
 8003894:	f7fc fe18 	bl	80004c8 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4620      	mov	r0, r4
 800389e:	4629      	mov	r1, r5
 80038a0:	f7fc fc5a 	bl	8000158 <__aeabi_dsub>
 80038a4:	460d      	mov	r5, r1
 80038a6:	4604      	mov	r4, r0
 80038a8:	f7fd f8a8 	bl	80009fc <__aeabi_d2iz>
 80038ac:	9004      	str	r0, [sp, #16]
 80038ae:	f7fc fda1 	bl	80003f4 <__aeabi_i2d>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4620      	mov	r0, r4
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7fc fc4d 	bl	8000158 <__aeabi_dsub>
 80038be:	f1bb 0f00 	cmp.w	fp, #0
 80038c2:	4680      	mov	r8, r0
 80038c4:	4689      	mov	r9, r1
 80038c6:	dd6f      	ble.n	80039a8 <__kernel_rem_pio2+0x248>
 80038c8:	1e71      	subs	r1, r6, #1
 80038ca:	ab0c      	add	r3, sp, #48	; 0x30
 80038cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038d0:	9c04      	ldr	r4, [sp, #16]
 80038d2:	f1cb 0018 	rsb	r0, fp, #24
 80038d6:	fa43 f200 	asr.w	r2, r3, r0
 80038da:	4414      	add	r4, r2
 80038dc:	4082      	lsls	r2, r0
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	aa0c      	add	r2, sp, #48	; 0x30
 80038e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80038e6:	f1cb 0217 	rsb	r2, fp, #23
 80038ea:	9404      	str	r4, [sp, #16]
 80038ec:	4113      	asrs	r3, r2
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	9b00      	ldr	r3, [sp, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	dd66      	ble.n	80039c4 <__kernel_rem_pio2+0x264>
 80038f6:	2200      	movs	r2, #0
 80038f8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80038fc:	4614      	mov	r4, r2
 80038fe:	9b04      	ldr	r3, [sp, #16]
 8003900:	3301      	adds	r3, #1
 8003902:	9304      	str	r3, [sp, #16]
 8003904:	4296      	cmp	r6, r2
 8003906:	f300 80ad 	bgt.w	8003a64 <__kernel_rem_pio2+0x304>
 800390a:	f1bb 0f00 	cmp.w	fp, #0
 800390e:	dd07      	ble.n	8003920 <__kernel_rem_pio2+0x1c0>
 8003910:	f1bb 0f01 	cmp.w	fp, #1
 8003914:	f000 80b5 	beq.w	8003a82 <__kernel_rem_pio2+0x322>
 8003918:	f1bb 0f02 	cmp.w	fp, #2
 800391c:	f000 80bb 	beq.w	8003a96 <__kernel_rem_pio2+0x336>
 8003920:	9b00      	ldr	r3, [sp, #0]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d14e      	bne.n	80039c4 <__kernel_rem_pio2+0x264>
 8003926:	4642      	mov	r2, r8
 8003928:	464b      	mov	r3, r9
 800392a:	2000      	movs	r0, #0
 800392c:	4948      	ldr	r1, [pc, #288]	; (8003a50 <__kernel_rem_pio2+0x2f0>)
 800392e:	f7fc fc13 	bl	8000158 <__aeabi_dsub>
 8003932:	4680      	mov	r8, r0
 8003934:	4689      	mov	r9, r1
 8003936:	2c00      	cmp	r4, #0
 8003938:	d044      	beq.n	80039c4 <__kernel_rem_pio2+0x264>
 800393a:	465a      	mov	r2, fp
 800393c:	2000      	movs	r0, #0
 800393e:	4944      	ldr	r1, [pc, #272]	; (8003a50 <__kernel_rem_pio2+0x2f0>)
 8003940:	f000 fa4e 	bl	8003de0 <scalbn>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4640      	mov	r0, r8
 800394a:	4649      	mov	r1, r9
 800394c:	f7fc fc04 	bl	8000158 <__aeabi_dsub>
 8003950:	4680      	mov	r8, r0
 8003952:	4689      	mov	r9, r1
 8003954:	e036      	b.n	80039c4 <__kernel_rem_pio2+0x264>
 8003956:	2200      	movs	r2, #0
 8003958:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <__kernel_rem_pio2+0x2f4>)
 800395a:	4620      	mov	r0, r4
 800395c:	4629      	mov	r1, r5
 800395e:	f7fc fdb3 	bl	80004c8 <__aeabi_dmul>
 8003962:	f7fd f84b 	bl	80009fc <__aeabi_d2iz>
 8003966:	f7fc fd45 	bl	80003f4 <__aeabi_i2d>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003972:	2200      	movs	r2, #0
 8003974:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <__kernel_rem_pio2+0x2f8>)
 8003976:	f7fc fda7 	bl	80004c8 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4620      	mov	r0, r4
 8003980:	4629      	mov	r1, r5
 8003982:	f7fc fbe9 	bl	8000158 <__aeabi_dsub>
 8003986:	f7fd f839 	bl	80009fc <__aeabi_d2iz>
 800398a:	9b00      	ldr	r3, [sp, #0]
 800398c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003990:	f843 0b04 	str.w	r0, [r3], #4
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800399a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800399e:	f7fc fbdd 	bl	800015c <__adddf3>
 80039a2:	4604      	mov	r4, r0
 80039a4:	460d      	mov	r5, r1
 80039a6:	e760      	b.n	800386a <__kernel_rem_pio2+0x10a>
 80039a8:	d105      	bne.n	80039b6 <__kernel_rem_pio2+0x256>
 80039aa:	1e73      	subs	r3, r6, #1
 80039ac:	aa0c      	add	r2, sp, #48	; 0x30
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	15db      	asrs	r3, r3, #23
 80039b4:	e79b      	b.n	80038ee <__kernel_rem_pio2+0x18e>
 80039b6:	2200      	movs	r2, #0
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <__kernel_rem_pio2+0x2fc>)
 80039ba:	f7fd f80b 	bl	80009d4 <__aeabi_dcmpge>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d13e      	bne.n	8003a40 <__kernel_rem_pio2+0x2e0>
 80039c2:	9000      	str	r0, [sp, #0]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2300      	movs	r3, #0
 80039c8:	4640      	mov	r0, r8
 80039ca:	4649      	mov	r1, r9
 80039cc:	f7fc ffe4 	bl	8000998 <__aeabi_dcmpeq>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	f000 80b2 	beq.w	8003b3a <__kernel_rem_pio2+0x3da>
 80039d6:	1e74      	subs	r4, r6, #1
 80039d8:	4623      	mov	r3, r4
 80039da:	2200      	movs	r2, #0
 80039dc:	9902      	ldr	r1, [sp, #8]
 80039de:	428b      	cmp	r3, r1
 80039e0:	da60      	bge.n	8003aa4 <__kernel_rem_pio2+0x344>
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	d075      	beq.n	8003ad2 <__kernel_rem_pio2+0x372>
 80039e6:	ab0c      	add	r3, sp, #48	; 0x30
 80039e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80039ec:	f1ab 0b18 	sub.w	fp, fp, #24
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a0 	beq.w	8003b36 <__kernel_rem_pio2+0x3d6>
 80039f6:	465a      	mov	r2, fp
 80039f8:	2000      	movs	r0, #0
 80039fa:	4915      	ldr	r1, [pc, #84]	; (8003a50 <__kernel_rem_pio2+0x2f0>)
 80039fc:	f000 f9f0 	bl	8003de0 <scalbn>
 8003a00:	46a2      	mov	sl, r4
 8003a02:	4606      	mov	r6, r0
 8003a04:	460f      	mov	r7, r1
 8003a06:	f04f 0800 	mov.w	r8, #0
 8003a0a:	ab70      	add	r3, sp, #448	; 0x1c0
 8003a0c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003a54 <__kernel_rem_pio2+0x2f4>
 8003a10:	00e5      	lsls	r5, r4, #3
 8003a12:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8003a16:	f1ba 0f00 	cmp.w	sl, #0
 8003a1a:	f280 80c4 	bge.w	8003ba6 <__kernel_rem_pio2+0x446>
 8003a1e:	4626      	mov	r6, r4
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	f2c0 80f6 	blt.w	8003c12 <__kernel_rem_pio2+0x4b2>
 8003a26:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <__kernel_rem_pio2+0x300>)
 8003a28:	f04f 0a00 	mov.w	sl, #0
 8003a2c:	9307      	str	r3, [sp, #28]
 8003a2e:	ab70      	add	r3, sp, #448	; 0x1c0
 8003a30:	f04f 0b00 	mov.w	fp, #0
 8003a34:	f04f 0800 	mov.w	r8, #0
 8003a38:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003a3c:	1ba7      	subs	r7, r4, r6
 8003a3e:	e0dc      	b.n	8003bfa <__kernel_rem_pio2+0x49a>
 8003a40:	2302      	movs	r3, #2
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	e757      	b.n	80038f6 <__kernel_rem_pio2+0x196>
 8003a46:	bf00      	nop
 8003a48:	080041e0 	.word	0x080041e0
 8003a4c:	40200000 	.word	0x40200000
 8003a50:	3ff00000 	.word	0x3ff00000
 8003a54:	3e700000 	.word	0x3e700000
 8003a58:	41700000 	.word	0x41700000
 8003a5c:	3fe00000 	.word	0x3fe00000
 8003a60:	080041a0 	.word	0x080041a0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b944      	cbnz	r4, 8003a7a <__kernel_rem_pio2+0x31a>
 8003a68:	b11b      	cbz	r3, 8003a72 <__kernel_rem_pio2+0x312>
 8003a6a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	2301      	movs	r3, #1
 8003a72:	461c      	mov	r4, r3
 8003a74:	3201      	adds	r2, #1
 8003a76:	3704      	adds	r7, #4
 8003a78:	e744      	b.n	8003904 <__kernel_rem_pio2+0x1a4>
 8003a7a:	1acb      	subs	r3, r1, r3
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4623      	mov	r3, r4
 8003a80:	e7f7      	b.n	8003a72 <__kernel_rem_pio2+0x312>
 8003a82:	1e72      	subs	r2, r6, #1
 8003a84:	ab0c      	add	r3, sp, #48	; 0x30
 8003a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003a8e:	a90c      	add	r1, sp, #48	; 0x30
 8003a90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003a94:	e744      	b.n	8003920 <__kernel_rem_pio2+0x1c0>
 8003a96:	1e72      	subs	r2, r6, #1
 8003a98:	ab0c      	add	r3, sp, #48	; 0x30
 8003a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003aa2:	e7f4      	b.n	8003a8e <__kernel_rem_pio2+0x32e>
 8003aa4:	a90c      	add	r1, sp, #48	; 0x30
 8003aa6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	e795      	b.n	80039dc <__kernel_rem_pio2+0x27c>
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003ab6:	2900      	cmp	r1, #0
 8003ab8:	d0fa      	beq.n	8003ab0 <__kernel_rem_pio2+0x350>
 8003aba:	9a08      	ldr	r2, [sp, #32]
 8003abc:	a920      	add	r1, sp, #128	; 0x80
 8003abe:	18b2      	adds	r2, r6, r2
 8003ac0:	f106 0801 	add.w	r8, r6, #1
 8003ac4:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8003ac8:	18f4      	adds	r4, r6, r3
 8003aca:	4544      	cmp	r4, r8
 8003acc:	da04      	bge.n	8003ad8 <__kernel_rem_pio2+0x378>
 8003ace:	4626      	mov	r6, r4
 8003ad0:	e6bf      	b.n	8003852 <__kernel_rem_pio2+0xf2>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ad6:	e7ec      	b.n	8003ab2 <__kernel_rem_pio2+0x352>
 8003ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ada:	f04f 0900 	mov.w	r9, #0
 8003ade:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003ae2:	f7fc fc87 	bl	80003f4 <__aeabi_i2d>
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	2700      	movs	r7, #0
 8003aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aec:	e9c5 0100 	strd	r0, r1, [r5]
 8003af0:	3b08      	subs	r3, #8
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	9504      	str	r5, [sp, #16]
 8003af6:	9b07      	ldr	r3, [sp, #28]
 8003af8:	4599      	cmp	r9, r3
 8003afa:	dd05      	ble.n	8003b08 <__kernel_rem_pio2+0x3a8>
 8003afc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8003b00:	f108 0801 	add.w	r8, r8, #1
 8003b04:	3508      	adds	r5, #8
 8003b06:	e7e0      	b.n	8003aca <__kernel_rem_pio2+0x36a>
 8003b08:	f8dd c010 	ldr.w	ip, [sp, #16]
 8003b0c:	9900      	ldr	r1, [sp, #0]
 8003b0e:	f109 0901 	add.w	r9, r9, #1
 8003b12:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003b16:	9100      	str	r1, [sp, #0]
 8003b18:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8003b1c:	f8cd c010 	str.w	ip, [sp, #16]
 8003b20:	f7fc fcd2 	bl	80004c8 <__aeabi_dmul>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4630      	mov	r0, r6
 8003b2a:	4639      	mov	r1, r7
 8003b2c:	f7fc fb16 	bl	800015c <__adddf3>
 8003b30:	4606      	mov	r6, r0
 8003b32:	460f      	mov	r7, r1
 8003b34:	e7df      	b.n	8003af6 <__kernel_rem_pio2+0x396>
 8003b36:	3c01      	subs	r4, #1
 8003b38:	e755      	b.n	80039e6 <__kernel_rem_pio2+0x286>
 8003b3a:	f1cb 0200 	rsb	r2, fp, #0
 8003b3e:	4640      	mov	r0, r8
 8003b40:	4649      	mov	r1, r9
 8003b42:	f000 f94d 	bl	8003de0 <scalbn>
 8003b46:	2200      	movs	r2, #0
 8003b48:	4ba3      	ldr	r3, [pc, #652]	; (8003dd8 <__kernel_rem_pio2+0x678>)
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	460d      	mov	r5, r1
 8003b4e:	f7fc ff41 	bl	80009d4 <__aeabi_dcmpge>
 8003b52:	b1f8      	cbz	r0, 8003b94 <__kernel_rem_pio2+0x434>
 8003b54:	2200      	movs	r2, #0
 8003b56:	4ba1      	ldr	r3, [pc, #644]	; (8003ddc <__kernel_rem_pio2+0x67c>)
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7fc fcb4 	bl	80004c8 <__aeabi_dmul>
 8003b60:	f7fc ff4c 	bl	80009fc <__aeabi_d2iz>
 8003b64:	4607      	mov	r7, r0
 8003b66:	f7fc fc45 	bl	80003f4 <__aeabi_i2d>
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4b9a      	ldr	r3, [pc, #616]	; (8003dd8 <__kernel_rem_pio2+0x678>)
 8003b6e:	f7fc fcab 	bl	80004c8 <__aeabi_dmul>
 8003b72:	460b      	mov	r3, r1
 8003b74:	4602      	mov	r2, r0
 8003b76:	4629      	mov	r1, r5
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7fc faed 	bl	8000158 <__aeabi_dsub>
 8003b7e:	f7fc ff3d 	bl	80009fc <__aeabi_d2iz>
 8003b82:	1c74      	adds	r4, r6, #1
 8003b84:	ab0c      	add	r3, sp, #48	; 0x30
 8003b86:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003b8a:	f10b 0b18 	add.w	fp, fp, #24
 8003b8e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8003b92:	e730      	b.n	80039f6 <__kernel_rem_pio2+0x296>
 8003b94:	4620      	mov	r0, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7fc ff30 	bl	80009fc <__aeabi_d2iz>
 8003b9c:	ab0c      	add	r3, sp, #48	; 0x30
 8003b9e:	4634      	mov	r4, r6
 8003ba0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003ba4:	e727      	b.n	80039f6 <__kernel_rem_pio2+0x296>
 8003ba6:	ab0c      	add	r3, sp, #48	; 0x30
 8003ba8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003bac:	f7fc fc22 	bl	80003f4 <__aeabi_i2d>
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	f7fc fc88 	bl	80004c8 <__aeabi_dmul>
 8003bb8:	4642      	mov	r2, r8
 8003bba:	e86b 0102 	strd	r0, r1, [fp], #-8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	4639      	mov	r1, r7
 8003bc4:	f7fc fc80 	bl	80004c8 <__aeabi_dmul>
 8003bc8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003bcc:	4606      	mov	r6, r0
 8003bce:	460f      	mov	r7, r1
 8003bd0:	e721      	b.n	8003a16 <__kernel_rem_pio2+0x2b6>
 8003bd2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8003bd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003bda:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8003bde:	f8cd c01c 	str.w	ip, [sp, #28]
 8003be2:	f7fc fc71 	bl	80004c8 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4650      	mov	r0, sl
 8003bec:	4659      	mov	r1, fp
 8003bee:	f7fc fab5 	bl	800015c <__adddf3>
 8003bf2:	4682      	mov	sl, r0
 8003bf4:	468b      	mov	fp, r1
 8003bf6:	f108 0801 	add.w	r8, r8, #1
 8003bfa:	9b02      	ldr	r3, [sp, #8]
 8003bfc:	4598      	cmp	r8, r3
 8003bfe:	dc01      	bgt.n	8003c04 <__kernel_rem_pio2+0x4a4>
 8003c00:	45b8      	cmp	r8, r7
 8003c02:	dde6      	ble.n	8003bd2 <__kernel_rem_pio2+0x472>
 8003c04:	ab48      	add	r3, sp, #288	; 0x120
 8003c06:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003c0a:	e9c7 ab00 	strd	sl, fp, [r7]
 8003c0e:	3e01      	subs	r6, #1
 8003c10:	e706      	b.n	8003a20 <__kernel_rem_pio2+0x2c0>
 8003c12:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	dc09      	bgt.n	8003c2c <__kernel_rem_pio2+0x4cc>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	dc32      	bgt.n	8003c82 <__kernel_rem_pio2+0x522>
 8003c1c:	d058      	beq.n	8003cd0 <__kernel_rem_pio2+0x570>
 8003c1e:	9b04      	ldr	r3, [sp, #16]
 8003c20:	f003 0007 	and.w	r0, r3, #7
 8003c24:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d1f5      	bne.n	8003c1e <__kernel_rem_pio2+0x4be>
 8003c32:	ab48      	add	r3, sp, #288	; 0x120
 8003c34:	441d      	add	r5, r3
 8003c36:	46aa      	mov	sl, r5
 8003c38:	46a3      	mov	fp, r4
 8003c3a:	f1bb 0f00 	cmp.w	fp, #0
 8003c3e:	dc74      	bgt.n	8003d2a <__kernel_rem_pio2+0x5ca>
 8003c40:	46aa      	mov	sl, r5
 8003c42:	46a3      	mov	fp, r4
 8003c44:	f1bb 0f01 	cmp.w	fp, #1
 8003c48:	f300 808e 	bgt.w	8003d68 <__kernel_rem_pio2+0x608>
 8003c4c:	2700      	movs	r7, #0
 8003c4e:	463e      	mov	r6, r7
 8003c50:	2c01      	cmp	r4, #1
 8003c52:	f300 80a8 	bgt.w	8003da6 <__kernel_rem_pio2+0x646>
 8003c56:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8003c5a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8003c5e:	9b00      	ldr	r3, [sp, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 80aa 	bne.w	8003dba <__kernel_rem_pio2+0x65a>
 8003c66:	4603      	mov	r3, r0
 8003c68:	462a      	mov	r2, r5
 8003c6a:	9806      	ldr	r0, [sp, #24]
 8003c6c:	e9c0 2300 	strd	r2, r3, [r0]
 8003c70:	4622      	mov	r2, r4
 8003c72:	460b      	mov	r3, r1
 8003c74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003c78:	463a      	mov	r2, r7
 8003c7a:	4633      	mov	r3, r6
 8003c7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003c80:	e7cd      	b.n	8003c1e <__kernel_rem_pio2+0x4be>
 8003c82:	2000      	movs	r0, #0
 8003c84:	46a0      	mov	r8, r4
 8003c86:	4601      	mov	r1, r0
 8003c88:	ab48      	add	r3, sp, #288	; 0x120
 8003c8a:	441d      	add	r5, r3
 8003c8c:	f1b8 0f00 	cmp.w	r8, #0
 8003c90:	da38      	bge.n	8003d04 <__kernel_rem_pio2+0x5a4>
 8003c92:	9b00      	ldr	r3, [sp, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d03c      	beq.n	8003d12 <__kernel_rem_pio2+0x5b2>
 8003c98:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	9d06      	ldr	r5, [sp, #24]
 8003ca2:	2601      	movs	r6, #1
 8003ca4:	e9c5 2300 	strd	r2, r3, [r5]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003cae:	f7fc fa53 	bl	8000158 <__aeabi_dsub>
 8003cb2:	4684      	mov	ip, r0
 8003cb4:	460f      	mov	r7, r1
 8003cb6:	ad48      	add	r5, sp, #288	; 0x120
 8003cb8:	42b4      	cmp	r4, r6
 8003cba:	da2c      	bge.n	8003d16 <__kernel_rem_pio2+0x5b6>
 8003cbc:	9b00      	ldr	r3, [sp, #0]
 8003cbe:	b10b      	cbz	r3, 8003cc4 <__kernel_rem_pio2+0x564>
 8003cc0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003cc4:	4662      	mov	r2, ip
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	9906      	ldr	r1, [sp, #24]
 8003cca:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003cce:	e7a6      	b.n	8003c1e <__kernel_rem_pio2+0x4be>
 8003cd0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8003cd2:	ab48      	add	r3, sp, #288	; 0x120
 8003cd4:	4637      	mov	r7, r6
 8003cd6:	441d      	add	r5, r3
 8003cd8:	2c00      	cmp	r4, #0
 8003cda:	da09      	bge.n	8003cf0 <__kernel_rem_pio2+0x590>
 8003cdc:	9b00      	ldr	r3, [sp, #0]
 8003cde:	b10b      	cbz	r3, 8003ce4 <__kernel_rem_pio2+0x584>
 8003ce0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	9906      	ldr	r1, [sp, #24]
 8003cea:	e9c1 2300 	strd	r2, r3, [r1]
 8003cee:	e796      	b.n	8003c1e <__kernel_rem_pio2+0x4be>
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	f7fc fa30 	bl	800015c <__adddf3>
 8003cfc:	3c01      	subs	r4, #1
 8003cfe:	4606      	mov	r6, r0
 8003d00:	460f      	mov	r7, r1
 8003d02:	e7e9      	b.n	8003cd8 <__kernel_rem_pio2+0x578>
 8003d04:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003d08:	f7fc fa28 	bl	800015c <__adddf3>
 8003d0c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003d10:	e7bc      	b.n	8003c8c <__kernel_rem_pio2+0x52c>
 8003d12:	460d      	mov	r5, r1
 8003d14:	e7c2      	b.n	8003c9c <__kernel_rem_pio2+0x53c>
 8003d16:	4660      	mov	r0, ip
 8003d18:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	f7fc fa1d 	bl	800015c <__adddf3>
 8003d22:	3601      	adds	r6, #1
 8003d24:	4684      	mov	ip, r0
 8003d26:	460f      	mov	r7, r1
 8003d28:	e7c6      	b.n	8003cb8 <__kernel_rem_pio2+0x558>
 8003d2a:	e9da 6700 	ldrd	r6, r7, [sl]
 8003d2e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8003d32:	4632      	mov	r2, r6
 8003d34:	463b      	mov	r3, r7
 8003d36:	4640      	mov	r0, r8
 8003d38:	4649      	mov	r1, r9
 8003d3a:	f7fc fa0f 	bl	800015c <__adddf3>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d46:	4640      	mov	r0, r8
 8003d48:	4649      	mov	r1, r9
 8003d4a:	f7fc fa05 	bl	8000158 <__aeabi_dsub>
 8003d4e:	4632      	mov	r2, r6
 8003d50:	463b      	mov	r3, r7
 8003d52:	f7fc fa03 	bl	800015c <__adddf3>
 8003d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d5a:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003d5e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003d62:	e9ca 2300 	strd	r2, r3, [sl]
 8003d66:	e768      	b.n	8003c3a <__kernel_rem_pio2+0x4da>
 8003d68:	e9da 8900 	ldrd	r8, r9, [sl]
 8003d6c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8003d70:	4642      	mov	r2, r8
 8003d72:	464b      	mov	r3, r9
 8003d74:	4630      	mov	r0, r6
 8003d76:	4639      	mov	r1, r7
 8003d78:	f7fc f9f0 	bl	800015c <__adddf3>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d84:	4630      	mov	r0, r6
 8003d86:	4639      	mov	r1, r7
 8003d88:	f7fc f9e6 	bl	8000158 <__aeabi_dsub>
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	f7fc f9e4 	bl	800015c <__adddf3>
 8003d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d98:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003d9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003da0:	e9ca 2300 	strd	r2, r3, [sl]
 8003da4:	e74e      	b.n	8003c44 <__kernel_rem_pio2+0x4e4>
 8003da6:	4638      	mov	r0, r7
 8003da8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003dac:	4631      	mov	r1, r6
 8003dae:	f7fc f9d5 	bl	800015c <__adddf3>
 8003db2:	3c01      	subs	r4, #1
 8003db4:	4607      	mov	r7, r0
 8003db6:	460e      	mov	r6, r1
 8003db8:	e74a      	b.n	8003c50 <__kernel_rem_pio2+0x4f0>
 8003dba:	9b06      	ldr	r3, [sp, #24]
 8003dbc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003dc0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003dc4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003dc8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8003dcc:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8003dd0:	601d      	str	r5, [r3, #0]
 8003dd2:	615e      	str	r6, [r3, #20]
 8003dd4:	e723      	b.n	8003c1e <__kernel_rem_pio2+0x4be>
 8003dd6:	bf00      	nop
 8003dd8:	41700000 	.word	0x41700000
 8003ddc:	3e700000 	.word	0x3e700000

08003de0 <scalbn>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	4616      	mov	r6, r2
 8003de4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003de8:	4604      	mov	r4, r0
 8003dea:	460d      	mov	r5, r1
 8003dec:	460b      	mov	r3, r1
 8003dee:	b992      	cbnz	r2, 8003e16 <scalbn+0x36>
 8003df0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003df4:	4303      	orrs	r3, r0
 8003df6:	d03c      	beq.n	8003e72 <scalbn+0x92>
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <scalbn+0xe0>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f7fc fb64 	bl	80004c8 <__aeabi_dmul>
 8003e00:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <scalbn+0xe4>)
 8003e02:	4604      	mov	r4, r0
 8003e04:	429e      	cmp	r6, r3
 8003e06:	460d      	mov	r5, r1
 8003e08:	da0f      	bge.n	8003e2a <scalbn+0x4a>
 8003e0a:	a329      	add	r3, pc, #164	; (adr r3, 8003eb0 <scalbn+0xd0>)
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f7fc fb5a 	bl	80004c8 <__aeabi_dmul>
 8003e14:	e006      	b.n	8003e24 <scalbn+0x44>
 8003e16:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8003e1a:	42ba      	cmp	r2, r7
 8003e1c:	d109      	bne.n	8003e32 <scalbn+0x52>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f7fc f99c 	bl	800015c <__adddf3>
 8003e24:	4604      	mov	r4, r0
 8003e26:	460d      	mov	r5, r1
 8003e28:	e023      	b.n	8003e72 <scalbn+0x92>
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003e30:	3a36      	subs	r2, #54	; 0x36
 8003e32:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003e36:	428e      	cmp	r6, r1
 8003e38:	dd0e      	ble.n	8003e58 <scalbn+0x78>
 8003e3a:	a31f      	add	r3, pc, #124	; (adr r3, 8003eb8 <scalbn+0xd8>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003e44:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003e48:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003e4c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003e50:	481d      	ldr	r0, [pc, #116]	; (8003ec8 <scalbn+0xe8>)
 8003e52:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003e56:	e7db      	b.n	8003e10 <scalbn+0x30>
 8003e58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003e5c:	4432      	add	r2, r6
 8003e5e:	428a      	cmp	r2, r1
 8003e60:	dceb      	bgt.n	8003e3a <scalbn+0x5a>
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	dd08      	ble.n	8003e78 <scalbn+0x98>
 8003e66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e6e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003e72:	4620      	mov	r0, r4
 8003e74:	4629      	mov	r1, r5
 8003e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e78:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003e7c:	da0c      	bge.n	8003e98 <scalbn+0xb8>
 8003e7e:	a30c      	add	r3, pc, #48	; (adr r3, 8003eb0 <scalbn+0xd0>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003e88:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8003e8c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8003e90:	480e      	ldr	r0, [pc, #56]	; (8003ecc <scalbn+0xec>)
 8003e92:	f041 011f 	orr.w	r1, r1, #31
 8003e96:	e7bb      	b.n	8003e10 <scalbn+0x30>
 8003e98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e9c:	3236      	adds	r2, #54	; 0x36
 8003e9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ea2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <scalbn+0xf0>)
 8003eae:	e7af      	b.n	8003e10 <scalbn+0x30>
 8003eb0:	c2f8f359 	.word	0xc2f8f359
 8003eb4:	01a56e1f 	.word	0x01a56e1f
 8003eb8:	8800759c 	.word	0x8800759c
 8003ebc:	7e37e43c 	.word	0x7e37e43c
 8003ec0:	43500000 	.word	0x43500000
 8003ec4:	ffff3cb0 	.word	0xffff3cb0
 8003ec8:	8800759c 	.word	0x8800759c
 8003ecc:	c2f8f359 	.word	0xc2f8f359
 8003ed0:	3c900000 	.word	0x3c900000
 8003ed4:	00000000 	.word	0x00000000

08003ed8 <floor>:
 8003ed8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003ee4:	2e13      	cmp	r6, #19
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4607      	mov	r7, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	4605      	mov	r5, r0
 8003eee:	dc32      	bgt.n	8003f56 <floor+0x7e>
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	da14      	bge.n	8003f1e <floor+0x46>
 8003ef4:	a334      	add	r3, pc, #208	; (adr r3, 8003fc8 <floor+0xf0>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f7fc f92f 	bl	800015c <__adddf3>
 8003efe:	2200      	movs	r2, #0
 8003f00:	2300      	movs	r3, #0
 8003f02:	f7fc fd71 	bl	80009e8 <__aeabi_dcmpgt>
 8003f06:	b138      	cbz	r0, 8003f18 <floor+0x40>
 8003f08:	2c00      	cmp	r4, #0
 8003f0a:	da56      	bge.n	8003fba <floor+0xe2>
 8003f0c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003f10:	4325      	orrs	r5, r4
 8003f12:	d055      	beq.n	8003fc0 <floor+0xe8>
 8003f14:	2500      	movs	r5, #0
 8003f16:	4c2e      	ldr	r4, [pc, #184]	; (8003fd0 <floor+0xf8>)
 8003f18:	4623      	mov	r3, r4
 8003f1a:	462f      	mov	r7, r5
 8003f1c:	e025      	b.n	8003f6a <floor+0x92>
 8003f1e:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <floor+0xfc>)
 8003f20:	fa42 f806 	asr.w	r8, r2, r6
 8003f24:	ea01 0208 	and.w	r2, r1, r8
 8003f28:	4302      	orrs	r2, r0
 8003f2a:	d01e      	beq.n	8003f6a <floor+0x92>
 8003f2c:	a326      	add	r3, pc, #152	; (adr r3, 8003fc8 <floor+0xf0>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc f913 	bl	800015c <__adddf3>
 8003f36:	2200      	movs	r2, #0
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f7fc fd55 	bl	80009e8 <__aeabi_dcmpgt>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d0ea      	beq.n	8003f18 <floor+0x40>
 8003f42:	2c00      	cmp	r4, #0
 8003f44:	bfbe      	ittt	lt
 8003f46:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003f4a:	4133      	asrlt	r3, r6
 8003f4c:	18e4      	addlt	r4, r4, r3
 8003f4e:	2500      	movs	r5, #0
 8003f50:	ea24 0408 	bic.w	r4, r4, r8
 8003f54:	e7e0      	b.n	8003f18 <floor+0x40>
 8003f56:	2e33      	cmp	r6, #51	; 0x33
 8003f58:	dd0b      	ble.n	8003f72 <floor+0x9a>
 8003f5a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003f5e:	d104      	bne.n	8003f6a <floor+0x92>
 8003f60:	4602      	mov	r2, r0
 8003f62:	f7fc f8fb 	bl	800015c <__adddf3>
 8003f66:	4607      	mov	r7, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f72:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003f76:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8003f7a:	fa28 f802 	lsr.w	r8, r8, r2
 8003f7e:	ea10 0f08 	tst.w	r0, r8
 8003f82:	d0f2      	beq.n	8003f6a <floor+0x92>
 8003f84:	a310      	add	r3, pc, #64	; (adr r3, 8003fc8 <floor+0xf0>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f7fc f8e7 	bl	800015c <__adddf3>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2300      	movs	r3, #0
 8003f92:	f7fc fd29 	bl	80009e8 <__aeabi_dcmpgt>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d0be      	beq.n	8003f18 <floor+0x40>
 8003f9a:	2c00      	cmp	r4, #0
 8003f9c:	da0a      	bge.n	8003fb4 <floor+0xdc>
 8003f9e:	2e14      	cmp	r6, #20
 8003fa0:	d101      	bne.n	8003fa6 <floor+0xce>
 8003fa2:	3401      	adds	r4, #1
 8003fa4:	e006      	b.n	8003fb4 <floor+0xdc>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003fac:	40b3      	lsls	r3, r6
 8003fae:	441d      	add	r5, r3
 8003fb0:	42af      	cmp	r7, r5
 8003fb2:	d8f6      	bhi.n	8003fa2 <floor+0xca>
 8003fb4:	ea25 0508 	bic.w	r5, r5, r8
 8003fb8:	e7ae      	b.n	8003f18 <floor+0x40>
 8003fba:	2500      	movs	r5, #0
 8003fbc:	462c      	mov	r4, r5
 8003fbe:	e7ab      	b.n	8003f18 <floor+0x40>
 8003fc0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003fc4:	e7a8      	b.n	8003f18 <floor+0x40>
 8003fc6:	bf00      	nop
 8003fc8:	8800759c 	.word	0x8800759c
 8003fcc:	7e37e43c 	.word	0x7e37e43c
 8003fd0:	bff00000 	.word	0xbff00000
 8003fd4:	000fffff 	.word	0x000fffff

08003fd8 <_init>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	bf00      	nop
 8003fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fde:	bc08      	pop	{r3}
 8003fe0:	469e      	mov	lr, r3
 8003fe2:	4770      	bx	lr

08003fe4 <_fini>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	bf00      	nop
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr
